// Code generated by Kitex v0.5.0. DO NOT EDIT.

package accountservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	account "github.com/zxq97/design/weitter/account/kitex_gen/account"
)

func serviceInfo() *kitex.ServiceInfo {
	return accountServiceServiceInfo
}

var accountServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AccountService"
	handlerType := (*account.AccountService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser":  kitex.NewMethodInfo(createUserHandler, newAccountServiceCreateUserArgs, newAccountServiceCreateUserResult, false),
		"MGetUsers":   kitex.NewMethodInfo(mGetUsersHandler, newAccountServiceMGetUsersArgs, newAccountServiceMGetUsersResult, false),
		"DeleteUsers": kitex.NewMethodInfo(deleteUsersHandler, newAccountServiceDeleteUsersArgs, newAccountServiceDeleteUsersResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "account",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.0",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*account.AccountServiceCreateUserArgs)
	realResult := result.(*account.AccountServiceCreateUserResult)
	success, err := handler.(account.AccountService).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAccountServiceCreateUserArgs() interface{} {
	return account.NewAccountServiceCreateUserArgs()
}

func newAccountServiceCreateUserResult() interface{} {
	return account.NewAccountServiceCreateUserResult()
}

func mGetUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*account.AccountServiceMGetUsersArgs)
	realResult := result.(*account.AccountServiceMGetUsersResult)
	success, err := handler.(account.AccountService).MGetUsers(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAccountServiceMGetUsersArgs() interface{} {
	return account.NewAccountServiceMGetUsersArgs()
}

func newAccountServiceMGetUsersResult() interface{} {
	return account.NewAccountServiceMGetUsersResult()
}

func deleteUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*account.AccountServiceDeleteUsersArgs)
	realResult := result.(*account.AccountServiceDeleteUsersResult)
	success, err := handler.(account.AccountService).DeleteUsers(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAccountServiceDeleteUsersArgs() interface{} {
	return account.NewAccountServiceDeleteUsersArgs()
}

func newAccountServiceDeleteUsersResult() interface{} {
	return account.NewAccountServiceDeleteUsersResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, req *account.CreateUserRequest) (r *account.EmptyResponse, err error) {
	var _args account.AccountServiceCreateUserArgs
	_args.Req = req
	var _result account.AccountServiceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetUsers(ctx context.Context, req *account.MGetUsersRequest) (r *account.MGetUsersResponse, err error) {
	var _args account.AccountServiceMGetUsersArgs
	_args.Req = req
	var _result account.AccountServiceMGetUsersResult
	if err = p.c.Call(ctx, "MGetUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUsers(ctx context.Context, req *account.DeleteUsersRequest) (r *account.EmptyResponse, err error) {
	var _args account.AccountServiceDeleteUsersArgs
	_args.Req = req
	var _result account.AccountServiceDeleteUsersResult
	if err = p.c.Call(ctx, "DeleteUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
