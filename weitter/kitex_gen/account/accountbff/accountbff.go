// Code generated by Kitex v0.5.0. DO NOT EDIT.

package accountbff

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	account "github.com/zxq97/design/weitter/kitex_gen/account"
	common "github.com/zxq97/design/weitter/kitex_gen/common"
)

func serviceInfo() *kitex.ServiceInfo {
	return accountBFFServiceInfo
}

var accountBFFServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AccountBFF"
	handlerType := (*account.AccountBFF)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser":     kitex.NewMethodInfo(createUserHandler, newAccountBFFCreateUserArgs, newAccountBFFCreateUserResult, false),
		"GetUser":        kitex.NewMethodInfo(getUserHandler, newAccountBFFGetUserArgs, newAccountBFFGetUserResult, false),
		"MGetUsers":      kitex.NewMethodInfo(mGetUsersHandler, newAccountBFFMGetUsersArgs, newAccountBFFMGetUsersResult, false),
		"DeleteUsers":    kitex.NewMethodInfo(deleteUsersHandler, newAccountBFFDeleteUsersArgs, newAccountBFFDeleteUsersResult, false),
		"CheckAdminUser": kitex.NewMethodInfo(checkAdminUserHandler, newAccountBFFCheckAdminUserArgs, newAccountBFFCheckAdminUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "account",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.0",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*account.AccountBFFCreateUserArgs)
	realResult := result.(*account.AccountBFFCreateUserResult)
	success, err := handler.(account.AccountBFF).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAccountBFFCreateUserArgs() interface{} {
	return account.NewAccountBFFCreateUserArgs()
}

func newAccountBFFCreateUserResult() interface{} {
	return account.NewAccountBFFCreateUserResult()
}

func getUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*account.AccountBFFGetUserArgs)
	realResult := result.(*account.AccountBFFGetUserResult)
	success, err := handler.(account.AccountBFF).GetUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAccountBFFGetUserArgs() interface{} {
	return account.NewAccountBFFGetUserArgs()
}

func newAccountBFFGetUserResult() interface{} {
	return account.NewAccountBFFGetUserResult()
}

func mGetUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*account.AccountBFFMGetUsersArgs)
	realResult := result.(*account.AccountBFFMGetUsersResult)
	success, err := handler.(account.AccountBFF).MGetUsers(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAccountBFFMGetUsersArgs() interface{} {
	return account.NewAccountBFFMGetUsersArgs()
}

func newAccountBFFMGetUsersResult() interface{} {
	return account.NewAccountBFFMGetUsersResult()
}

func deleteUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*account.AccountBFFDeleteUsersArgs)
	realResult := result.(*account.AccountBFFDeleteUsersResult)
	success, err := handler.(account.AccountBFF).DeleteUsers(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAccountBFFDeleteUsersArgs() interface{} {
	return account.NewAccountBFFDeleteUsersArgs()
}

func newAccountBFFDeleteUsersResult() interface{} {
	return account.NewAccountBFFDeleteUsersResult()
}

func checkAdminUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*account.AccountBFFCheckAdminUserArgs)
	realResult := result.(*account.AccountBFFCheckAdminUserResult)
	success, err := handler.(account.AccountBFF).CheckAdminUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAccountBFFCheckAdminUserArgs() interface{} {
	return account.NewAccountBFFCheckAdminUserArgs()
}

func newAccountBFFCheckAdminUserResult() interface{} {
	return account.NewAccountBFFCheckAdminUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, req *account.CreateUserRequest) (r *common.EmptyResponse, err error) {
	var _args account.AccountBFFCreateUserArgs
	_args.Req = req
	var _result account.AccountBFFCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUser(ctx context.Context, req *common.GetItemRequest) (r *account.GetUserResponse, err error) {
	var _args account.AccountBFFGetUserArgs
	_args.Req = req
	var _result account.AccountBFFGetUserResult
	if err = p.c.Call(ctx, "GetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetUsers(ctx context.Context, req *common.MGetItemARequest) (r *account.MGetUsersResponse, err error) {
	var _args account.AccountBFFMGetUsersArgs
	_args.Req = req
	var _result account.AccountBFFMGetUsersResult
	if err = p.c.Call(ctx, "MGetUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUsers(ctx context.Context, req *account.DeleteUsersRequest) (r *common.EmptyResponse, err error) {
	var _args account.AccountBFFDeleteUsersArgs
	_args.Req = req
	var _result account.AccountBFFDeleteUsersResult
	if err = p.c.Call(ctx, "DeleteUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckAdminUser(ctx context.Context, req *common.GetItemRequest) (r *common.CheckResponse, err error) {
	var _args account.AccountBFFCheckAdminUserArgs
	_args.Req = req
	var _result account.AccountBFFCheckAdminUserResult
	if err = p.c.Call(ctx, "CheckAdminUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
