// Code generated by Kitex v0.5.0. DO NOT EDIT.

package archivebff

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	archive "github.com/zxq97/design/weitter/kitex_gen/archive"
	common "github.com/zxq97/design/weitter/kitex_gen/common"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateArticle(ctx context.Context, req *archive.CreateArticleRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error)
	GetArticle(ctx context.Context, req *common.GetItemRequest, callOptions ...callopt.Option) (r *archive.GetArticleResponse, err error)
	MGetArticles(ctx context.Context, req *archive.MGetArticlesRequest, callOptions ...callopt.Option) (r *archive.MGetArticlesResponse, err error)
	GetUserArticles(ctx context.Context, req *common.GetUserItemRequest, callOptions ...callopt.Option) (r *archive.GetUserArticlesResponse, err error)
	DeleteArticles(ctx context.Context, req *archive.DeleteArticlesRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kArchiveBFFClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kArchiveBFFClient struct {
	*kClient
}

func (p *kArchiveBFFClient) CreateArticle(ctx context.Context, req *archive.CreateArticleRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateArticle(ctx, req)
}

func (p *kArchiveBFFClient) GetArticle(ctx context.Context, req *common.GetItemRequest, callOptions ...callopt.Option) (r *archive.GetArticleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetArticle(ctx, req)
}

func (p *kArchiveBFFClient) MGetArticles(ctx context.Context, req *archive.MGetArticlesRequest, callOptions ...callopt.Option) (r *archive.MGetArticlesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetArticles(ctx, req)
}

func (p *kArchiveBFFClient) GetUserArticles(ctx context.Context, req *common.GetUserItemRequest, callOptions ...callopt.Option) (r *archive.GetUserArticlesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserArticles(ctx, req)
}

func (p *kArchiveBFFClient) DeleteArticles(ctx context.Context, req *archive.DeleteArticlesRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteArticles(ctx, req)
}
