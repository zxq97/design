// Code generated by Kitex v0.5.0. DO NOT EDIT.

package archivebff

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	archive "github.com/zxq97/design/weitter/kitex_gen/archive"
	common "github.com/zxq97/design/weitter/kitex_gen/common"
)

func serviceInfo() *kitex.ServiceInfo {
	return archiveBFFServiceInfo
}

var archiveBFFServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ArchiveBFF"
	handlerType := (*archive.ArchiveBFF)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateArticle":   kitex.NewMethodInfo(createArticleHandler, newArchiveBFFCreateArticleArgs, newArchiveBFFCreateArticleResult, false),
		"GetArticle":      kitex.NewMethodInfo(getArticleHandler, newArchiveBFFGetArticleArgs, newArchiveBFFGetArticleResult, false),
		"MGetArticles":    kitex.NewMethodInfo(mGetArticlesHandler, newArchiveBFFMGetArticlesArgs, newArchiveBFFMGetArticlesResult, false),
		"GetUserArticles": kitex.NewMethodInfo(getUserArticlesHandler, newArchiveBFFGetUserArticlesArgs, newArchiveBFFGetUserArticlesResult, false),
		"DeleteArticles":  kitex.NewMethodInfo(deleteArticlesHandler, newArchiveBFFDeleteArticlesArgs, newArchiveBFFDeleteArticlesResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "archive",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.0",
		Extra:           extra,
	}
	return svcInfo
}

func createArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*archive.ArchiveBFFCreateArticleArgs)
	realResult := result.(*archive.ArchiveBFFCreateArticleResult)
	success, err := handler.(archive.ArchiveBFF).CreateArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArchiveBFFCreateArticleArgs() interface{} {
	return archive.NewArchiveBFFCreateArticleArgs()
}

func newArchiveBFFCreateArticleResult() interface{} {
	return archive.NewArchiveBFFCreateArticleResult()
}

func getArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*archive.ArchiveBFFGetArticleArgs)
	realResult := result.(*archive.ArchiveBFFGetArticleResult)
	success, err := handler.(archive.ArchiveBFF).GetArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArchiveBFFGetArticleArgs() interface{} {
	return archive.NewArchiveBFFGetArticleArgs()
}

func newArchiveBFFGetArticleResult() interface{} {
	return archive.NewArchiveBFFGetArticleResult()
}

func mGetArticlesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*archive.ArchiveBFFMGetArticlesArgs)
	realResult := result.(*archive.ArchiveBFFMGetArticlesResult)
	success, err := handler.(archive.ArchiveBFF).MGetArticles(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArchiveBFFMGetArticlesArgs() interface{} {
	return archive.NewArchiveBFFMGetArticlesArgs()
}

func newArchiveBFFMGetArticlesResult() interface{} {
	return archive.NewArchiveBFFMGetArticlesResult()
}

func getUserArticlesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*archive.ArchiveBFFGetUserArticlesArgs)
	realResult := result.(*archive.ArchiveBFFGetUserArticlesResult)
	success, err := handler.(archive.ArchiveBFF).GetUserArticles(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArchiveBFFGetUserArticlesArgs() interface{} {
	return archive.NewArchiveBFFGetUserArticlesArgs()
}

func newArchiveBFFGetUserArticlesResult() interface{} {
	return archive.NewArchiveBFFGetUserArticlesResult()
}

func deleteArticlesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*archive.ArchiveBFFDeleteArticlesArgs)
	realResult := result.(*archive.ArchiveBFFDeleteArticlesResult)
	success, err := handler.(archive.ArchiveBFF).DeleteArticles(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArchiveBFFDeleteArticlesArgs() interface{} {
	return archive.NewArchiveBFFDeleteArticlesArgs()
}

func newArchiveBFFDeleteArticlesResult() interface{} {
	return archive.NewArchiveBFFDeleteArticlesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateArticle(ctx context.Context, req *archive.CreateArticleRequest) (r *common.EmptyResponse, err error) {
	var _args archive.ArchiveBFFCreateArticleArgs
	_args.Req = req
	var _result archive.ArchiveBFFCreateArticleResult
	if err = p.c.Call(ctx, "CreateArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetArticle(ctx context.Context, req *common.GetItemRequest) (r *archive.GetArticleResponse, err error) {
	var _args archive.ArchiveBFFGetArticleArgs
	_args.Req = req
	var _result archive.ArchiveBFFGetArticleResult
	if err = p.c.Call(ctx, "GetArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetArticles(ctx context.Context, req *archive.MGetArticlesRequest) (r *archive.MGetArticlesResponse, err error) {
	var _args archive.ArchiveBFFMGetArticlesArgs
	_args.Req = req
	var _result archive.ArchiveBFFMGetArticlesResult
	if err = p.c.Call(ctx, "MGetArticles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserArticles(ctx context.Context, req *common.GetUserItemRequest) (r *archive.GetUserArticlesResponse, err error) {
	var _args archive.ArchiveBFFGetUserArticlesArgs
	_args.Req = req
	var _result archive.ArchiveBFFGetUserArticlesResult
	if err = p.c.Call(ctx, "GetUserArticles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteArticles(ctx context.Context, req *archive.DeleteArticlesRequest) (r *common.EmptyResponse, err error) {
	var _args archive.ArchiveBFFDeleteArticlesArgs
	_args.Req = req
	var _result archive.ArchiveBFFDeleteArticlesResult
	if err = p.c.Call(ctx, "DeleteArticles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
