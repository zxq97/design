// Code generated by Kitex v0.5.0. DO NOT EDIT.

package likebff

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	common "github.com/zxq97/design/weitter/kitex_gen/common"
	like "github.com/zxq97/design/weitter/kitex_gen/like"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Like(ctx context.Context, req *like.LikeRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error)
	Unlike(ctx context.Context, req *like.LikeRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error)
	GetLikedUsers(ctx context.Context, req *like.GetLikedUsersRequest, callOptions ...callopt.Option) (r *like.GetLikedUsersResponse, err error)
	GetRcvLikedList(ctx context.Context, req *like.GetLikedRecordRequest, callOptions ...callopt.Option) (r *like.GetLikedRecordResponse, err error)
	GetPubLikedList(ctx context.Context, req *like.GetLikedRecordRequest, callOptions ...callopt.Option) (r *like.GetLikedRecordResponse, err error)
	GetLikedState(ctx context.Context, req *like.GetLikedStateRequest, callOptions ...callopt.Option) (r *like.GetLikedStateResponse, err error)
	GetLikedCount(ctx context.Context, req *like.GetLikedCountRequest, callOptions ...callopt.Option) (r *like.GetLikedCountResponse, err error)
	MGetLikedState(ctx context.Context, req *like.MGetLikedStateRequest, callOptions ...callopt.Option) (r *like.MGetLikedStateResponse, err error)
	MGetLikedCount(ctx context.Context, req *like.MGetLikedCountRequest, callOptions ...callopt.Option) (r *like.MGetLikedCountResponse, err error)
	UpdateLikeCount(ctx context.Context, req *like.UpdateLikeCountRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error)
	MUpdateLikesCount(ctx context.Context, req *like.MUpdateLikesCountRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kLikeBFFClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kLikeBFFClient struct {
	*kClient
}

func (p *kLikeBFFClient) Like(ctx context.Context, req *like.LikeRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Like(ctx, req)
}

func (p *kLikeBFFClient) Unlike(ctx context.Context, req *like.LikeRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Unlike(ctx, req)
}

func (p *kLikeBFFClient) GetLikedUsers(ctx context.Context, req *like.GetLikedUsersRequest, callOptions ...callopt.Option) (r *like.GetLikedUsersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLikedUsers(ctx, req)
}

func (p *kLikeBFFClient) GetRcvLikedList(ctx context.Context, req *like.GetLikedRecordRequest, callOptions ...callopt.Option) (r *like.GetLikedRecordResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRcvLikedList(ctx, req)
}

func (p *kLikeBFFClient) GetPubLikedList(ctx context.Context, req *like.GetLikedRecordRequest, callOptions ...callopt.Option) (r *like.GetLikedRecordResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPubLikedList(ctx, req)
}

func (p *kLikeBFFClient) GetLikedState(ctx context.Context, req *like.GetLikedStateRequest, callOptions ...callopt.Option) (r *like.GetLikedStateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLikedState(ctx, req)
}

func (p *kLikeBFFClient) GetLikedCount(ctx context.Context, req *like.GetLikedCountRequest, callOptions ...callopt.Option) (r *like.GetLikedCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLikedCount(ctx, req)
}

func (p *kLikeBFFClient) MGetLikedState(ctx context.Context, req *like.MGetLikedStateRequest, callOptions ...callopt.Option) (r *like.MGetLikedStateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetLikedState(ctx, req)
}

func (p *kLikeBFFClient) MGetLikedCount(ctx context.Context, req *like.MGetLikedCountRequest, callOptions ...callopt.Option) (r *like.MGetLikedCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetLikedCount(ctx, req)
}

func (p *kLikeBFFClient) UpdateLikeCount(ctx context.Context, req *like.UpdateLikeCountRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateLikeCount(ctx, req)
}

func (p *kLikeBFFClient) MUpdateLikesCount(ctx context.Context, req *like.MUpdateLikesCountRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MUpdateLikesCount(ctx, req)
}
