// Code generated by Kitex v0.5.0. DO NOT EDIT.

package likebff

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	common "github.com/zxq97/design/weitter/kitex_gen/common"
	like "github.com/zxq97/design/weitter/kitex_gen/like"
)

func serviceInfo() *kitex.ServiceInfo {
	return likeBFFServiceInfo
}

var likeBFFServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "LikeBFF"
	handlerType := (*like.LikeBFF)(nil)
	methods := map[string]kitex.MethodInfo{
		"Like":              kitex.NewMethodInfo(likeHandler, newLikeBFFLikeArgs, newLikeBFFLikeResult, false),
		"Unlike":            kitex.NewMethodInfo(unlikeHandler, newLikeBFFUnlikeArgs, newLikeBFFUnlikeResult, false),
		"GetLikedUsers":     kitex.NewMethodInfo(getLikedUsersHandler, newLikeBFFGetLikedUsersArgs, newLikeBFFGetLikedUsersResult, false),
		"GetRcvLikedList":   kitex.NewMethodInfo(getRcvLikedListHandler, newLikeBFFGetRcvLikedListArgs, newLikeBFFGetRcvLikedListResult, false),
		"GetPubLikedList":   kitex.NewMethodInfo(getPubLikedListHandler, newLikeBFFGetPubLikedListArgs, newLikeBFFGetPubLikedListResult, false),
		"GetLikedState":     kitex.NewMethodInfo(getLikedStateHandler, newLikeBFFGetLikedStateArgs, newLikeBFFGetLikedStateResult, false),
		"GetLikedCount":     kitex.NewMethodInfo(getLikedCountHandler, newLikeBFFGetLikedCountArgs, newLikeBFFGetLikedCountResult, false),
		"MGetLikedState":    kitex.NewMethodInfo(mGetLikedStateHandler, newLikeBFFMGetLikedStateArgs, newLikeBFFMGetLikedStateResult, false),
		"MGetLikedCount":    kitex.NewMethodInfo(mGetLikedCountHandler, newLikeBFFMGetLikedCountArgs, newLikeBFFMGetLikedCountResult, false),
		"UpdateLikeCount":   kitex.NewMethodInfo(updateLikeCountHandler, newLikeBFFUpdateLikeCountArgs, newLikeBFFUpdateLikeCountResult, false),
		"MUpdateLikesCount": kitex.NewMethodInfo(mUpdateLikesCountHandler, newLikeBFFMUpdateLikesCountArgs, newLikeBFFMUpdateLikesCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "like",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.0",
		Extra:           extra,
	}
	return svcInfo
}

func likeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeBFFLikeArgs)
	realResult := result.(*like.LikeBFFLikeResult)
	success, err := handler.(like.LikeBFF).Like(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeBFFLikeArgs() interface{} {
	return like.NewLikeBFFLikeArgs()
}

func newLikeBFFLikeResult() interface{} {
	return like.NewLikeBFFLikeResult()
}

func unlikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeBFFUnlikeArgs)
	realResult := result.(*like.LikeBFFUnlikeResult)
	success, err := handler.(like.LikeBFF).Unlike(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeBFFUnlikeArgs() interface{} {
	return like.NewLikeBFFUnlikeArgs()
}

func newLikeBFFUnlikeResult() interface{} {
	return like.NewLikeBFFUnlikeResult()
}

func getLikedUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeBFFGetLikedUsersArgs)
	realResult := result.(*like.LikeBFFGetLikedUsersResult)
	success, err := handler.(like.LikeBFF).GetLikedUsers(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeBFFGetLikedUsersArgs() interface{} {
	return like.NewLikeBFFGetLikedUsersArgs()
}

func newLikeBFFGetLikedUsersResult() interface{} {
	return like.NewLikeBFFGetLikedUsersResult()
}

func getRcvLikedListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeBFFGetRcvLikedListArgs)
	realResult := result.(*like.LikeBFFGetRcvLikedListResult)
	success, err := handler.(like.LikeBFF).GetRcvLikedList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeBFFGetRcvLikedListArgs() interface{} {
	return like.NewLikeBFFGetRcvLikedListArgs()
}

func newLikeBFFGetRcvLikedListResult() interface{} {
	return like.NewLikeBFFGetRcvLikedListResult()
}

func getPubLikedListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeBFFGetPubLikedListArgs)
	realResult := result.(*like.LikeBFFGetPubLikedListResult)
	success, err := handler.(like.LikeBFF).GetPubLikedList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeBFFGetPubLikedListArgs() interface{} {
	return like.NewLikeBFFGetPubLikedListArgs()
}

func newLikeBFFGetPubLikedListResult() interface{} {
	return like.NewLikeBFFGetPubLikedListResult()
}

func getLikedStateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeBFFGetLikedStateArgs)
	realResult := result.(*like.LikeBFFGetLikedStateResult)
	success, err := handler.(like.LikeBFF).GetLikedState(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeBFFGetLikedStateArgs() interface{} {
	return like.NewLikeBFFGetLikedStateArgs()
}

func newLikeBFFGetLikedStateResult() interface{} {
	return like.NewLikeBFFGetLikedStateResult()
}

func getLikedCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeBFFGetLikedCountArgs)
	realResult := result.(*like.LikeBFFGetLikedCountResult)
	success, err := handler.(like.LikeBFF).GetLikedCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeBFFGetLikedCountArgs() interface{} {
	return like.NewLikeBFFGetLikedCountArgs()
}

func newLikeBFFGetLikedCountResult() interface{} {
	return like.NewLikeBFFGetLikedCountResult()
}

func mGetLikedStateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeBFFMGetLikedStateArgs)
	realResult := result.(*like.LikeBFFMGetLikedStateResult)
	success, err := handler.(like.LikeBFF).MGetLikedState(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeBFFMGetLikedStateArgs() interface{} {
	return like.NewLikeBFFMGetLikedStateArgs()
}

func newLikeBFFMGetLikedStateResult() interface{} {
	return like.NewLikeBFFMGetLikedStateResult()
}

func mGetLikedCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeBFFMGetLikedCountArgs)
	realResult := result.(*like.LikeBFFMGetLikedCountResult)
	success, err := handler.(like.LikeBFF).MGetLikedCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeBFFMGetLikedCountArgs() interface{} {
	return like.NewLikeBFFMGetLikedCountArgs()
}

func newLikeBFFMGetLikedCountResult() interface{} {
	return like.NewLikeBFFMGetLikedCountResult()
}

func updateLikeCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeBFFUpdateLikeCountArgs)
	realResult := result.(*like.LikeBFFUpdateLikeCountResult)
	success, err := handler.(like.LikeBFF).UpdateLikeCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeBFFUpdateLikeCountArgs() interface{} {
	return like.NewLikeBFFUpdateLikeCountArgs()
}

func newLikeBFFUpdateLikeCountResult() interface{} {
	return like.NewLikeBFFUpdateLikeCountResult()
}

func mUpdateLikesCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeBFFMUpdateLikesCountArgs)
	realResult := result.(*like.LikeBFFMUpdateLikesCountResult)
	success, err := handler.(like.LikeBFF).MUpdateLikesCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeBFFMUpdateLikesCountArgs() interface{} {
	return like.NewLikeBFFMUpdateLikesCountArgs()
}

func newLikeBFFMUpdateLikesCountResult() interface{} {
	return like.NewLikeBFFMUpdateLikesCountResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Like(ctx context.Context, req *like.LikeRequest) (r *common.EmptyResponse, err error) {
	var _args like.LikeBFFLikeArgs
	_args.Req = req
	var _result like.LikeBFFLikeResult
	if err = p.c.Call(ctx, "Like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Unlike(ctx context.Context, req *like.LikeRequest) (r *common.EmptyResponse, err error) {
	var _args like.LikeBFFUnlikeArgs
	_args.Req = req
	var _result like.LikeBFFUnlikeResult
	if err = p.c.Call(ctx, "Unlike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikedUsers(ctx context.Context, req *like.GetLikedUsersRequest) (r *like.GetLikedUsersResponse, err error) {
	var _args like.LikeBFFGetLikedUsersArgs
	_args.Req = req
	var _result like.LikeBFFGetLikedUsersResult
	if err = p.c.Call(ctx, "GetLikedUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRcvLikedList(ctx context.Context, req *like.GetLikedRecordRequest) (r *like.GetLikedRecordResponse, err error) {
	var _args like.LikeBFFGetRcvLikedListArgs
	_args.Req = req
	var _result like.LikeBFFGetRcvLikedListResult
	if err = p.c.Call(ctx, "GetRcvLikedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPubLikedList(ctx context.Context, req *like.GetLikedRecordRequest) (r *like.GetLikedRecordResponse, err error) {
	var _args like.LikeBFFGetPubLikedListArgs
	_args.Req = req
	var _result like.LikeBFFGetPubLikedListResult
	if err = p.c.Call(ctx, "GetPubLikedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikedState(ctx context.Context, req *like.GetLikedStateRequest) (r *like.GetLikedStateResponse, err error) {
	var _args like.LikeBFFGetLikedStateArgs
	_args.Req = req
	var _result like.LikeBFFGetLikedStateResult
	if err = p.c.Call(ctx, "GetLikedState", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikedCount(ctx context.Context, req *like.GetLikedCountRequest) (r *like.GetLikedCountResponse, err error) {
	var _args like.LikeBFFGetLikedCountArgs
	_args.Req = req
	var _result like.LikeBFFGetLikedCountResult
	if err = p.c.Call(ctx, "GetLikedCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetLikedState(ctx context.Context, req *like.MGetLikedStateRequest) (r *like.MGetLikedStateResponse, err error) {
	var _args like.LikeBFFMGetLikedStateArgs
	_args.Req = req
	var _result like.LikeBFFMGetLikedStateResult
	if err = p.c.Call(ctx, "MGetLikedState", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetLikedCount(ctx context.Context, req *like.MGetLikedCountRequest) (r *like.MGetLikedCountResponse, err error) {
	var _args like.LikeBFFMGetLikedCountArgs
	_args.Req = req
	var _result like.LikeBFFMGetLikedCountResult
	if err = p.c.Call(ctx, "MGetLikedCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateLikeCount(ctx context.Context, req *like.UpdateLikeCountRequest) (r *common.EmptyResponse, err error) {
	var _args like.LikeBFFUpdateLikeCountArgs
	_args.Req = req
	var _result like.LikeBFFUpdateLikeCountResult
	if err = p.c.Call(ctx, "UpdateLikeCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MUpdateLikesCount(ctx context.Context, req *like.MUpdateLikesCountRequest) (r *common.EmptyResponse, err error) {
	var _args like.LikeBFFMUpdateLikesCountArgs
	_args.Req = req
	var _result like.LikeBFFMUpdateLikesCountResult
	if err = p.c.Call(ctx, "MUpdateLikesCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
