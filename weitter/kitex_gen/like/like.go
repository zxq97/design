// Code generated by thriftgo (0.2.8). DO NOT EDIT.

package like

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/zxq97/design/weitter/kitex_gen/common"
)

type LikeItem struct {
	ObjId   int64 `thrift:"obj_id,1" frugal:"1,default,i64" json:"obj_id"`
	ObjType int32 `thrift:"obj_type,2" frugal:"2,default,i32" json:"obj_type"`
	Uid     int64 `thrift:"uid,3" frugal:"3,default,i64" json:"uid"`
}

func NewLikeItem() *LikeItem {
	return &LikeItem{}
}

func (p *LikeItem) InitDefault() {
	*p = LikeItem{}
}

func (p *LikeItem) GetObjId() (v int64) {
	return p.ObjId
}

func (p *LikeItem) GetObjType() (v int32) {
	return p.ObjType
}

func (p *LikeItem) GetUid() (v int64) {
	return p.Uid
}
func (p *LikeItem) SetObjId(val int64) {
	p.ObjId = val
}
func (p *LikeItem) SetObjType(val int32) {
	p.ObjType = val
}
func (p *LikeItem) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_LikeItem = map[int16]string{
	1: "obj_id",
	2: "obj_type",
	3: "uid",
}

func (p *LikeItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ObjId = v
	}
	return nil
}

func (p *LikeItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ObjType = v
	}
	return nil
}

func (p *LikeItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *LikeItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LikeItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ObjId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ObjType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LikeItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LikeItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeItem(%+v)", *p)
}

func (p *LikeItem) DeepEqual(ano *LikeItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ObjId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *LikeItem) Field1DeepEqual(src int64) bool {

	if p.ObjId != src {
		return false
	}
	return true
}
func (p *LikeItem) Field2DeepEqual(src int32) bool {

	if p.ObjType != src {
		return false
	}
	return true
}
func (p *LikeItem) Field3DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type LikeRequest struct {
	ObjId   int64 `thrift:"obj_id,1" frugal:"1,default,i64" json:"obj_id"`
	ObjType int32 `thrift:"obj_type,2" frugal:"2,default,i32" json:"obj_type"`
	Uid     int64 `thrift:"uid,3" frugal:"3,default,i64" json:"uid"`
	Author  int64 `thrift:"author,4" frugal:"4,default,i64" json:"author"`
}

func NewLikeRequest() *LikeRequest {
	return &LikeRequest{}
}

func (p *LikeRequest) InitDefault() {
	*p = LikeRequest{}
}

func (p *LikeRequest) GetObjId() (v int64) {
	return p.ObjId
}

func (p *LikeRequest) GetObjType() (v int32) {
	return p.ObjType
}

func (p *LikeRequest) GetUid() (v int64) {
	return p.Uid
}

func (p *LikeRequest) GetAuthor() (v int64) {
	return p.Author
}
func (p *LikeRequest) SetObjId(val int64) {
	p.ObjId = val
}
func (p *LikeRequest) SetObjType(val int32) {
	p.ObjType = val
}
func (p *LikeRequest) SetUid(val int64) {
	p.Uid = val
}
func (p *LikeRequest) SetAuthor(val int64) {
	p.Author = val
}

var fieldIDToName_LikeRequest = map[int16]string{
	1: "obj_id",
	2: "obj_type",
	3: "uid",
	4: "author",
}

func (p *LikeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ObjId = v
	}
	return nil
}

func (p *LikeRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ObjType = v
	}
	return nil
}

func (p *LikeRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *LikeRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Author = v
	}
	return nil
}

func (p *LikeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LikeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ObjId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ObjType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LikeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LikeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("author", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Author); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *LikeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeRequest(%+v)", *p)
}

func (p *LikeRequest) DeepEqual(ano *LikeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ObjId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field4DeepEqual(ano.Author) {
		return false
	}
	return true
}

func (p *LikeRequest) Field1DeepEqual(src int64) bool {

	if p.ObjId != src {
		return false
	}
	return true
}
func (p *LikeRequest) Field2DeepEqual(src int32) bool {

	if p.ObjType != src {
		return false
	}
	return true
}
func (p *LikeRequest) Field3DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *LikeRequest) Field4DeepEqual(src int64) bool {

	if p.Author != src {
		return false
	}
	return true
}

type GetLikedUsersRequest struct {
	ObjId   int64 `thrift:"obj_id,1" frugal:"1,default,i64" json:"obj_id"`
	ObjType int32 `thrift:"obj_type,2" frugal:"2,default,i32" json:"obj_type"`
}

func NewGetLikedUsersRequest() *GetLikedUsersRequest {
	return &GetLikedUsersRequest{}
}

func (p *GetLikedUsersRequest) InitDefault() {
	*p = GetLikedUsersRequest{}
}

func (p *GetLikedUsersRequest) GetObjId() (v int64) {
	return p.ObjId
}

func (p *GetLikedUsersRequest) GetObjType() (v int32) {
	return p.ObjType
}
func (p *GetLikedUsersRequest) SetObjId(val int64) {
	p.ObjId = val
}
func (p *GetLikedUsersRequest) SetObjType(val int32) {
	p.ObjType = val
}

var fieldIDToName_GetLikedUsersRequest = map[int16]string{
	1: "obj_id",
	2: "obj_type",
}

func (p *GetLikedUsersRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLikedUsersRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLikedUsersRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ObjId = v
	}
	return nil
}

func (p *GetLikedUsersRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ObjType = v
	}
	return nil
}

func (p *GetLikedUsersRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedUsersRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLikedUsersRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ObjId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLikedUsersRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ObjType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetLikedUsersRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikedUsersRequest(%+v)", *p)
}

func (p *GetLikedUsersRequest) DeepEqual(ano *GetLikedUsersRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ObjId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjType) {
		return false
	}
	return true
}

func (p *GetLikedUsersRequest) Field1DeepEqual(src int64) bool {

	if p.ObjId != src {
		return false
	}
	return true
}
func (p *GetLikedUsersRequest) Field2DeepEqual(src int32) bool {

	if p.ObjType != src {
		return false
	}
	return true
}

type GetLikedUsersResponse struct {
	Uids []int64 `thrift:"uids,1" frugal:"1,default,list<i64>" json:"uids"`
}

func NewGetLikedUsersResponse() *GetLikedUsersResponse {
	return &GetLikedUsersResponse{}
}

func (p *GetLikedUsersResponse) InitDefault() {
	*p = GetLikedUsersResponse{}
}

func (p *GetLikedUsersResponse) GetUids() (v []int64) {
	return p.Uids
}
func (p *GetLikedUsersResponse) SetUids(val []int64) {
	p.Uids = val
}

var fieldIDToName_GetLikedUsersResponse = map[int16]string{
	1: "uids",
}

func (p *GetLikedUsersResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLikedUsersResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLikedUsersResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Uids = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Uids = append(p.Uids, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetLikedUsersResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedUsersResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLikedUsersResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Uids)); err != nil {
		return err
	}
	for _, v := range p.Uids {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLikedUsersResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikedUsersResponse(%+v)", *p)
}

func (p *GetLikedUsersResponse) DeepEqual(ano *GetLikedUsersResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uids) {
		return false
	}
	return true
}

func (p *GetLikedUsersResponse) Field1DeepEqual(src []int64) bool {

	if len(p.Uids) != len(src) {
		return false
	}
	for i, v := range p.Uids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type GetLikedRecordRequest struct {
	ObjId       int64 `thrift:"obj_id,1" frugal:"1,default,i64" json:"obj_id"`
	ObjType     int32 `thrift:"obj_type,2" frugal:"2,default,i32" json:"obj_type"`
	Uid         int64 `thrift:"uid,3" frugal:"3,default,i64" json:"uid"`
	Author      int64 `thrift:"author,4" frugal:"4,default,i64" json:"author"`
	OperatorUid int64 `thrift:"operator_uid,5" frugal:"5,default,i64" json:"operator_uid"`
	Limit       int8  `thrift:"limit,6" frugal:"6,default,i8" json:"limit"`
}

func NewGetLikedRecordRequest() *GetLikedRecordRequest {
	return &GetLikedRecordRequest{}
}

func (p *GetLikedRecordRequest) InitDefault() {
	*p = GetLikedRecordRequest{}
}

func (p *GetLikedRecordRequest) GetObjId() (v int64) {
	return p.ObjId
}

func (p *GetLikedRecordRequest) GetObjType() (v int32) {
	return p.ObjType
}

func (p *GetLikedRecordRequest) GetUid() (v int64) {
	return p.Uid
}

func (p *GetLikedRecordRequest) GetAuthor() (v int64) {
	return p.Author
}

func (p *GetLikedRecordRequest) GetOperatorUid() (v int64) {
	return p.OperatorUid
}

func (p *GetLikedRecordRequest) GetLimit() (v int8) {
	return p.Limit
}
func (p *GetLikedRecordRequest) SetObjId(val int64) {
	p.ObjId = val
}
func (p *GetLikedRecordRequest) SetObjType(val int32) {
	p.ObjType = val
}
func (p *GetLikedRecordRequest) SetUid(val int64) {
	p.Uid = val
}
func (p *GetLikedRecordRequest) SetAuthor(val int64) {
	p.Author = val
}
func (p *GetLikedRecordRequest) SetOperatorUid(val int64) {
	p.OperatorUid = val
}
func (p *GetLikedRecordRequest) SetLimit(val int8) {
	p.Limit = val
}

var fieldIDToName_GetLikedRecordRequest = map[int16]string{
	1: "obj_id",
	2: "obj_type",
	3: "uid",
	4: "author",
	5: "operator_uid",
	6: "limit",
}

func (p *GetLikedRecordRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLikedRecordRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLikedRecordRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ObjId = v
	}
	return nil
}

func (p *GetLikedRecordRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ObjType = v
	}
	return nil
}

func (p *GetLikedRecordRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *GetLikedRecordRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Author = v
	}
	return nil
}

func (p *GetLikedRecordRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OperatorUid = v
	}
	return nil
}

func (p *GetLikedRecordRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *GetLikedRecordRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedRecordRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLikedRecordRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ObjId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLikedRecordRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ObjType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetLikedRecordRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetLikedRecordRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("author", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Author); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetLikedRecordRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("operator_uid", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OperatorUid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetLikedRecordRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.BYTE, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetLikedRecordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikedRecordRequest(%+v)", *p)
}

func (p *GetLikedRecordRequest) DeepEqual(ano *GetLikedRecordRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ObjId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field4DeepEqual(ano.Author) {
		return false
	}
	if !p.Field5DeepEqual(ano.OperatorUid) {
		return false
	}
	if !p.Field6DeepEqual(ano.Limit) {
		return false
	}
	return true
}

func (p *GetLikedRecordRequest) Field1DeepEqual(src int64) bool {

	if p.ObjId != src {
		return false
	}
	return true
}
func (p *GetLikedRecordRequest) Field2DeepEqual(src int32) bool {

	if p.ObjType != src {
		return false
	}
	return true
}
func (p *GetLikedRecordRequest) Field3DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *GetLikedRecordRequest) Field4DeepEqual(src int64) bool {

	if p.Author != src {
		return false
	}
	return true
}
func (p *GetLikedRecordRequest) Field5DeepEqual(src int64) bool {

	if p.OperatorUid != src {
		return false
	}
	return true
}
func (p *GetLikedRecordRequest) Field6DeepEqual(src int8) bool {

	if p.Limit != src {
		return false
	}
	return true
}

type GetLikedRecordResponse struct {
	Likes   []*LikeItem `thrift:"likes,1" frugal:"1,default,list<LikeItem>" json:"likes"`
	HasMore bool        `thrift:"has_more,2" frugal:"2,default,bool" json:"has_more"`
}

func NewGetLikedRecordResponse() *GetLikedRecordResponse {
	return &GetLikedRecordResponse{}
}

func (p *GetLikedRecordResponse) InitDefault() {
	*p = GetLikedRecordResponse{}
}

func (p *GetLikedRecordResponse) GetLikes() (v []*LikeItem) {
	return p.Likes
}

func (p *GetLikedRecordResponse) GetHasMore() (v bool) {
	return p.HasMore
}
func (p *GetLikedRecordResponse) SetLikes(val []*LikeItem) {
	p.Likes = val
}
func (p *GetLikedRecordResponse) SetHasMore(val bool) {
	p.HasMore = val
}

var fieldIDToName_GetLikedRecordResponse = map[int16]string{
	1: "likes",
	2: "has_more",
}

func (p *GetLikedRecordResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLikedRecordResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLikedRecordResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Likes = make([]*LikeItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLikeItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Likes = append(p.Likes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetLikedRecordResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.HasMore = v
	}
	return nil
}

func (p *GetLikedRecordResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedRecordResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLikedRecordResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("likes", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Likes)); err != nil {
		return err
	}
	for _, v := range p.Likes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLikedRecordResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HasMore); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetLikedRecordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikedRecordResponse(%+v)", *p)
}

func (p *GetLikedRecordResponse) DeepEqual(ano *GetLikedRecordResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Likes) {
		return false
	}
	if !p.Field2DeepEqual(ano.HasMore) {
		return false
	}
	return true
}

func (p *GetLikedRecordResponse) Field1DeepEqual(src []*LikeItem) bool {

	if len(p.Likes) != len(src) {
		return false
	}
	for i, v := range p.Likes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetLikedRecordResponse) Field2DeepEqual(src bool) bool {

	if p.HasMore != src {
		return false
	}
	return true
}

type GetLikedStateRequest struct {
	ObjId   int64 `thrift:"obj_id,1" frugal:"1,default,i64" json:"obj_id"`
	ObjType int32 `thrift:"obj_type,2" frugal:"2,default,i32" json:"obj_type"`
	Uid     int64 `thrift:"uid,3" frugal:"3,default,i64" json:"uid"`
}

func NewGetLikedStateRequest() *GetLikedStateRequest {
	return &GetLikedStateRequest{}
}

func (p *GetLikedStateRequest) InitDefault() {
	*p = GetLikedStateRequest{}
}

func (p *GetLikedStateRequest) GetObjId() (v int64) {
	return p.ObjId
}

func (p *GetLikedStateRequest) GetObjType() (v int32) {
	return p.ObjType
}

func (p *GetLikedStateRequest) GetUid() (v int64) {
	return p.Uid
}
func (p *GetLikedStateRequest) SetObjId(val int64) {
	p.ObjId = val
}
func (p *GetLikedStateRequest) SetObjType(val int32) {
	p.ObjType = val
}
func (p *GetLikedStateRequest) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_GetLikedStateRequest = map[int16]string{
	1: "obj_id",
	2: "obj_type",
	3: "uid",
}

func (p *GetLikedStateRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLikedStateRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLikedStateRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ObjId = v
	}
	return nil
}

func (p *GetLikedStateRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ObjType = v
	}
	return nil
}

func (p *GetLikedStateRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *GetLikedStateRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedStateRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLikedStateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ObjId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLikedStateRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ObjType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetLikedStateRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetLikedStateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikedStateRequest(%+v)", *p)
}

func (p *GetLikedStateRequest) DeepEqual(ano *GetLikedStateRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ObjId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *GetLikedStateRequest) Field1DeepEqual(src int64) bool {

	if p.ObjId != src {
		return false
	}
	return true
}
func (p *GetLikedStateRequest) Field2DeepEqual(src int32) bool {

	if p.ObjType != src {
		return false
	}
	return true
}
func (p *GetLikedStateRequest) Field3DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type GetLikedStateResponse struct {
	Ok bool `thrift:"ok,1" frugal:"1,default,bool" json:"ok"`
}

func NewGetLikedStateResponse() *GetLikedStateResponse {
	return &GetLikedStateResponse{}
}

func (p *GetLikedStateResponse) InitDefault() {
	*p = GetLikedStateResponse{}
}

func (p *GetLikedStateResponse) GetOk() (v bool) {
	return p.Ok
}
func (p *GetLikedStateResponse) SetOk(val bool) {
	p.Ok = val
}

var fieldIDToName_GetLikedStateResponse = map[int16]string{
	1: "ok",
}

func (p *GetLikedStateResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLikedStateResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLikedStateResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Ok = v
	}
	return nil
}

func (p *GetLikedStateResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedStateResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLikedStateResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ok", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Ok); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLikedStateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikedStateResponse(%+v)", *p)
}

func (p *GetLikedStateResponse) DeepEqual(ano *GetLikedStateResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ok) {
		return false
	}
	return true
}

func (p *GetLikedStateResponse) Field1DeepEqual(src bool) bool {

	if p.Ok != src {
		return false
	}
	return true
}

type GetLikedCountRequest struct {
	ObjId   int64 `thrift:"obj_id,1" frugal:"1,default,i64" json:"obj_id"`
	ObjType int32 `thrift:"obj_type,2" frugal:"2,default,i32" json:"obj_type"`
}

func NewGetLikedCountRequest() *GetLikedCountRequest {
	return &GetLikedCountRequest{}
}

func (p *GetLikedCountRequest) InitDefault() {
	*p = GetLikedCountRequest{}
}

func (p *GetLikedCountRequest) GetObjId() (v int64) {
	return p.ObjId
}

func (p *GetLikedCountRequest) GetObjType() (v int32) {
	return p.ObjType
}
func (p *GetLikedCountRequest) SetObjId(val int64) {
	p.ObjId = val
}
func (p *GetLikedCountRequest) SetObjType(val int32) {
	p.ObjType = val
}

var fieldIDToName_GetLikedCountRequest = map[int16]string{
	1: "obj_id",
	2: "obj_type",
}

func (p *GetLikedCountRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLikedCountRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLikedCountRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ObjId = v
	}
	return nil
}

func (p *GetLikedCountRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ObjType = v
	}
	return nil
}

func (p *GetLikedCountRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedCountRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLikedCountRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ObjId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLikedCountRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ObjType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetLikedCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikedCountRequest(%+v)", *p)
}

func (p *GetLikedCountRequest) DeepEqual(ano *GetLikedCountRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ObjId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjType) {
		return false
	}
	return true
}

func (p *GetLikedCountRequest) Field1DeepEqual(src int64) bool {

	if p.ObjId != src {
		return false
	}
	return true
}
func (p *GetLikedCountRequest) Field2DeepEqual(src int32) bool {

	if p.ObjType != src {
		return false
	}
	return true
}

type GetLikedCountResponse struct {
	Cnt int32 `thrift:"cnt,1" frugal:"1,default,i32" json:"cnt"`
}

func NewGetLikedCountResponse() *GetLikedCountResponse {
	return &GetLikedCountResponse{}
}

func (p *GetLikedCountResponse) InitDefault() {
	*p = GetLikedCountResponse{}
}

func (p *GetLikedCountResponse) GetCnt() (v int32) {
	return p.Cnt
}
func (p *GetLikedCountResponse) SetCnt(val int32) {
	p.Cnt = val
}

var fieldIDToName_GetLikedCountResponse = map[int16]string{
	1: "cnt",
}

func (p *GetLikedCountResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLikedCountResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLikedCountResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Cnt = v
	}
	return nil
}

func (p *GetLikedCountResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedCountResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLikedCountResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cnt", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Cnt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLikedCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikedCountResponse(%+v)", *p)
}

func (p *GetLikedCountResponse) DeepEqual(ano *GetLikedCountResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cnt) {
		return false
	}
	return true
}

func (p *GetLikedCountResponse) Field1DeepEqual(src int32) bool {

	if p.Cnt != src {
		return false
	}
	return true
}

type MGetLikedStateRequest struct {
	Obj map[int32][]int64 `thrift:"obj,1" frugal:"1,default,map<i32:list<i64>>" json:"obj"`
	Uid int64             `thrift:"uid,2" frugal:"2,default,i64" json:"uid"`
}

func NewMGetLikedStateRequest() *MGetLikedStateRequest {
	return &MGetLikedStateRequest{}
}

func (p *MGetLikedStateRequest) InitDefault() {
	*p = MGetLikedStateRequest{}
}

func (p *MGetLikedStateRequest) GetObj() (v map[int32][]int64) {
	return p.Obj
}

func (p *MGetLikedStateRequest) GetUid() (v int64) {
	return p.Uid
}
func (p *MGetLikedStateRequest) SetObj(val map[int32][]int64) {
	p.Obj = val
}
func (p *MGetLikedStateRequest) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_MGetLikedStateRequest = map[int16]string{
	1: "obj",
	2: "uid",
}

func (p *MGetLikedStateRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MGetLikedStateRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MGetLikedStateRequest) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Obj = make(map[int32][]int64, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]int64, 0, size)
		for i := 0; i < size; i++ {
			var _elem int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Obj[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MGetLikedStateRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *MGetLikedStateRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedStateRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MGetLikedStateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Obj)); err != nil {
		return err
	}
	for k, v := range p.Obj {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MGetLikedStateRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MGetLikedStateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetLikedStateRequest(%+v)", *p)
}

func (p *MGetLikedStateRequest) DeepEqual(ano *MGetLikedStateRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Obj) {
		return false
	}
	if !p.Field2DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *MGetLikedStateRequest) Field1DeepEqual(src map[int32][]int64) bool {

	if len(p.Obj) != len(src) {
		return false
	}
	for k, v := range p.Obj {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}
func (p *MGetLikedStateRequest) Field2DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type MGetLikedStateResponse struct {
	M map[int32]map[int64]bool `thrift:"m,1" frugal:"1,default,map<i32:map<i64:bool>>" json:"m"`
}

func NewMGetLikedStateResponse() *MGetLikedStateResponse {
	return &MGetLikedStateResponse{}
}

func (p *MGetLikedStateResponse) InitDefault() {
	*p = MGetLikedStateResponse{}
}

func (p *MGetLikedStateResponse) GetM() (v map[int32]map[int64]bool) {
	return p.M
}
func (p *MGetLikedStateResponse) SetM(val map[int32]map[int64]bool) {
	p.M = val
}

var fieldIDToName_MGetLikedStateResponse = map[int16]string{
	1: "m",
}

func (p *MGetLikedStateResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MGetLikedStateResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MGetLikedStateResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.M = make(map[int32]map[int64]bool, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[int64]bool, size)
		for i := 0; i < size; i++ {
			var _key1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_key1 = v
			}

			var _val1 bool
			if v, err := iprot.ReadBool(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.M[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MGetLikedStateResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedStateResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MGetLikedStateResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("m", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.M)); err != nil {
		return err
	}
	for k, v := range p.M {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteMapBegin(thrift.I64, thrift.BOOL, len(v)); err != nil {
			return err
		}
		for k, v := range v {

			if err := oprot.WriteI64(k); err != nil {
				return err
			}

			if err := oprot.WriteBool(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MGetLikedStateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetLikedStateResponse(%+v)", *p)
}

func (p *MGetLikedStateResponse) DeepEqual(ano *MGetLikedStateResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.M) {
		return false
	}
	return true
}

func (p *MGetLikedStateResponse) Field1DeepEqual(src map[int32]map[int64]bool) bool {

	if len(p.M) != len(src) {
		return false
	}
	for k, v := range p.M {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}

type MGetLikedCountRequest struct {
	Obj map[int32][]int64 `thrift:"obj,1" frugal:"1,default,map<i32:list<i64>>" json:"obj"`
}

func NewMGetLikedCountRequest() *MGetLikedCountRequest {
	return &MGetLikedCountRequest{}
}

func (p *MGetLikedCountRequest) InitDefault() {
	*p = MGetLikedCountRequest{}
}

func (p *MGetLikedCountRequest) GetObj() (v map[int32][]int64) {
	return p.Obj
}
func (p *MGetLikedCountRequest) SetObj(val map[int32][]int64) {
	p.Obj = val
}

var fieldIDToName_MGetLikedCountRequest = map[int16]string{
	1: "obj",
}

func (p *MGetLikedCountRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MGetLikedCountRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MGetLikedCountRequest) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Obj = make(map[int32][]int64, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]int64, 0, size)
		for i := 0; i < size; i++ {
			var _elem int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Obj[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MGetLikedCountRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedCountRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MGetLikedCountRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Obj)); err != nil {
		return err
	}
	for k, v := range p.Obj {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MGetLikedCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetLikedCountRequest(%+v)", *p)
}

func (p *MGetLikedCountRequest) DeepEqual(ano *MGetLikedCountRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Obj) {
		return false
	}
	return true
}

func (p *MGetLikedCountRequest) Field1DeepEqual(src map[int32][]int64) bool {

	if len(p.Obj) != len(src) {
		return false
	}
	for k, v := range p.Obj {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}

type MGetLikedCountResponse struct {
	M map[int32]map[int64]int32 `thrift:"m,1" frugal:"1,default,map<i32:map<i64:i32>>" json:"m"`
}

func NewMGetLikedCountResponse() *MGetLikedCountResponse {
	return &MGetLikedCountResponse{}
}

func (p *MGetLikedCountResponse) InitDefault() {
	*p = MGetLikedCountResponse{}
}

func (p *MGetLikedCountResponse) GetM() (v map[int32]map[int64]int32) {
	return p.M
}
func (p *MGetLikedCountResponse) SetM(val map[int32]map[int64]int32) {
	p.M = val
}

var fieldIDToName_MGetLikedCountResponse = map[int16]string{
	1: "m",
}

func (p *MGetLikedCountResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MGetLikedCountResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MGetLikedCountResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.M = make(map[int32]map[int64]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[int64]int32, size)
		for i := 0; i < size; i++ {
			var _key1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_key1 = v
			}

			var _val1 int32
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.M[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MGetLikedCountResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedCountResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MGetLikedCountResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("m", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.M)); err != nil {
		return err
	}
	for k, v := range p.M {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteMapBegin(thrift.I64, thrift.I32, len(v)); err != nil {
			return err
		}
		for k, v := range v {

			if err := oprot.WriteI64(k); err != nil {
				return err
			}

			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MGetLikedCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetLikedCountResponse(%+v)", *p)
}

func (p *MGetLikedCountResponse) DeepEqual(ano *MGetLikedCountResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.M) {
		return false
	}
	return true
}

func (p *MGetLikedCountResponse) Field1DeepEqual(src map[int32]map[int64]int32) bool {

	if len(p.M) != len(src) {
		return false
	}
	for k, v := range p.M {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}

type UpdateLikeCountRequest struct {
	ObjId   int64 `thrift:"obj_id,1" frugal:"1,default,i64" json:"obj_id"`
	ObjType int32 `thrift:"obj_type,2" frugal:"2,default,i32" json:"obj_type"`
	Uid     int64 `thrift:"uid,3" frugal:"3,default,i64" json:"uid"`
	Count   int32 `thrift:"count,4" frugal:"4,default,i32" json:"count"`
}

func NewUpdateLikeCountRequest() *UpdateLikeCountRequest {
	return &UpdateLikeCountRequest{}
}

func (p *UpdateLikeCountRequest) InitDefault() {
	*p = UpdateLikeCountRequest{}
}

func (p *UpdateLikeCountRequest) GetObjId() (v int64) {
	return p.ObjId
}

func (p *UpdateLikeCountRequest) GetObjType() (v int32) {
	return p.ObjType
}

func (p *UpdateLikeCountRequest) GetUid() (v int64) {
	return p.Uid
}

func (p *UpdateLikeCountRequest) GetCount() (v int32) {
	return p.Count
}
func (p *UpdateLikeCountRequest) SetObjId(val int64) {
	p.ObjId = val
}
func (p *UpdateLikeCountRequest) SetObjType(val int32) {
	p.ObjType = val
}
func (p *UpdateLikeCountRequest) SetUid(val int64) {
	p.Uid = val
}
func (p *UpdateLikeCountRequest) SetCount(val int32) {
	p.Count = val
}

var fieldIDToName_UpdateLikeCountRequest = map[int16]string{
	1: "obj_id",
	2: "obj_type",
	3: "uid",
	4: "count",
}

func (p *UpdateLikeCountRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateLikeCountRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateLikeCountRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ObjId = v
	}
	return nil
}

func (p *UpdateLikeCountRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ObjType = v
	}
	return nil
}

func (p *UpdateLikeCountRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *UpdateLikeCountRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *UpdateLikeCountRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateLikeCountRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateLikeCountRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ObjId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateLikeCountRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ObjType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateLikeCountRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateLikeCountRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateLikeCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateLikeCountRequest(%+v)", *p)
}

func (p *UpdateLikeCountRequest) DeepEqual(ano *UpdateLikeCountRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ObjId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field4DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *UpdateLikeCountRequest) Field1DeepEqual(src int64) bool {

	if p.ObjId != src {
		return false
	}
	return true
}
func (p *UpdateLikeCountRequest) Field2DeepEqual(src int32) bool {

	if p.ObjType != src {
		return false
	}
	return true
}
func (p *UpdateLikeCountRequest) Field3DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *UpdateLikeCountRequest) Field4DeepEqual(src int32) bool {

	if p.Count != src {
		return false
	}
	return true
}

type MUpdateLikesCountRequest struct {
	M   map[int32]map[int64]int32 `thrift:"m,1" frugal:"1,default,map<i32:map<i64:i32>>" json:"m"`
	Uid int64                     `thrift:"uid,2" frugal:"2,default,i64" json:"uid"`
}

func NewMUpdateLikesCountRequest() *MUpdateLikesCountRequest {
	return &MUpdateLikesCountRequest{}
}

func (p *MUpdateLikesCountRequest) InitDefault() {
	*p = MUpdateLikesCountRequest{}
}

func (p *MUpdateLikesCountRequest) GetM() (v map[int32]map[int64]int32) {
	return p.M
}

func (p *MUpdateLikesCountRequest) GetUid() (v int64) {
	return p.Uid
}
func (p *MUpdateLikesCountRequest) SetM(val map[int32]map[int64]int32) {
	p.M = val
}
func (p *MUpdateLikesCountRequest) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_MUpdateLikesCountRequest = map[int16]string{
	1: "m",
	2: "uid",
}

func (p *MUpdateLikesCountRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MUpdateLikesCountRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MUpdateLikesCountRequest) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.M = make(map[int32]map[int64]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[int64]int32, size)
		for i := 0; i < size; i++ {
			var _key1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_key1 = v
			}

			var _val1 int32
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.M[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MUpdateLikesCountRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *MUpdateLikesCountRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MUpdateLikesCountRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MUpdateLikesCountRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("m", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.M)); err != nil {
		return err
	}
	for k, v := range p.M {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteMapBegin(thrift.I64, thrift.I32, len(v)); err != nil {
			return err
		}
		for k, v := range v {

			if err := oprot.WriteI64(k); err != nil {
				return err
			}

			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MUpdateLikesCountRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MUpdateLikesCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MUpdateLikesCountRequest(%+v)", *p)
}

func (p *MUpdateLikesCountRequest) DeepEqual(ano *MUpdateLikesCountRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.M) {
		return false
	}
	if !p.Field2DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *MUpdateLikesCountRequest) Field1DeepEqual(src map[int32]map[int64]int32) bool {

	if len(p.M) != len(src) {
		return false
	}
	for k, v := range p.M {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}
func (p *MUpdateLikesCountRequest) Field2DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type LikeBFF interface {
	Like(ctx context.Context, req *LikeRequest) (r *common.EmptyResponse, err error)

	Unlike(ctx context.Context, req *LikeRequest) (r *common.EmptyResponse, err error)

	GetLikedUsers(ctx context.Context, req *GetLikedUsersRequest) (r *GetLikedUsersResponse, err error)

	GetRcvLikedList(ctx context.Context, req *GetLikedRecordRequest) (r *GetLikedRecordResponse, err error)

	GetPubLikedList(ctx context.Context, req *GetLikedRecordRequest) (r *GetLikedRecordResponse, err error)

	GetLikedState(ctx context.Context, req *GetLikedStateRequest) (r *GetLikedStateResponse, err error)

	GetLikedCount(ctx context.Context, req *GetLikedCountRequest) (r *GetLikedCountResponse, err error)

	MGetLikedState(ctx context.Context, req *MGetLikedStateRequest) (r *MGetLikedStateResponse, err error)

	MGetLikedCount(ctx context.Context, req *MGetLikedCountRequest) (r *MGetLikedCountResponse, err error)

	UpdateLikeCount(ctx context.Context, req *UpdateLikeCountRequest) (r *common.EmptyResponse, err error)

	MUpdateLikesCount(ctx context.Context, req *MUpdateLikesCountRequest) (r *common.EmptyResponse, err error)
}

type LikeBFFClient struct {
	c thrift.TClient
}

func NewLikeBFFClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LikeBFFClient {
	return &LikeBFFClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewLikeBFFClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LikeBFFClient {
	return &LikeBFFClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewLikeBFFClient(c thrift.TClient) *LikeBFFClient {
	return &LikeBFFClient{
		c: c,
	}
}

func (p *LikeBFFClient) Client_() thrift.TClient {
	return p.c
}

func (p *LikeBFFClient) Like(ctx context.Context, req *LikeRequest) (r *common.EmptyResponse, err error) {
	var _args LikeBFFLikeArgs
	_args.Req = req
	var _result LikeBFFLikeResult
	if err = p.Client_().Call(ctx, "Like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeBFFClient) Unlike(ctx context.Context, req *LikeRequest) (r *common.EmptyResponse, err error) {
	var _args LikeBFFUnlikeArgs
	_args.Req = req
	var _result LikeBFFUnlikeResult
	if err = p.Client_().Call(ctx, "Unlike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeBFFClient) GetLikedUsers(ctx context.Context, req *GetLikedUsersRequest) (r *GetLikedUsersResponse, err error) {
	var _args LikeBFFGetLikedUsersArgs
	_args.Req = req
	var _result LikeBFFGetLikedUsersResult
	if err = p.Client_().Call(ctx, "GetLikedUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeBFFClient) GetRcvLikedList(ctx context.Context, req *GetLikedRecordRequest) (r *GetLikedRecordResponse, err error) {
	var _args LikeBFFGetRcvLikedListArgs
	_args.Req = req
	var _result LikeBFFGetRcvLikedListResult
	if err = p.Client_().Call(ctx, "GetRcvLikedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeBFFClient) GetPubLikedList(ctx context.Context, req *GetLikedRecordRequest) (r *GetLikedRecordResponse, err error) {
	var _args LikeBFFGetPubLikedListArgs
	_args.Req = req
	var _result LikeBFFGetPubLikedListResult
	if err = p.Client_().Call(ctx, "GetPubLikedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeBFFClient) GetLikedState(ctx context.Context, req *GetLikedStateRequest) (r *GetLikedStateResponse, err error) {
	var _args LikeBFFGetLikedStateArgs
	_args.Req = req
	var _result LikeBFFGetLikedStateResult
	if err = p.Client_().Call(ctx, "GetLikedState", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeBFFClient) GetLikedCount(ctx context.Context, req *GetLikedCountRequest) (r *GetLikedCountResponse, err error) {
	var _args LikeBFFGetLikedCountArgs
	_args.Req = req
	var _result LikeBFFGetLikedCountResult
	if err = p.Client_().Call(ctx, "GetLikedCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeBFFClient) MGetLikedState(ctx context.Context, req *MGetLikedStateRequest) (r *MGetLikedStateResponse, err error) {
	var _args LikeBFFMGetLikedStateArgs
	_args.Req = req
	var _result LikeBFFMGetLikedStateResult
	if err = p.Client_().Call(ctx, "MGetLikedState", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeBFFClient) MGetLikedCount(ctx context.Context, req *MGetLikedCountRequest) (r *MGetLikedCountResponse, err error) {
	var _args LikeBFFMGetLikedCountArgs
	_args.Req = req
	var _result LikeBFFMGetLikedCountResult
	if err = p.Client_().Call(ctx, "MGetLikedCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeBFFClient) UpdateLikeCount(ctx context.Context, req *UpdateLikeCountRequest) (r *common.EmptyResponse, err error) {
	var _args LikeBFFUpdateLikeCountArgs
	_args.Req = req
	var _result LikeBFFUpdateLikeCountResult
	if err = p.Client_().Call(ctx, "UpdateLikeCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeBFFClient) MUpdateLikesCount(ctx context.Context, req *MUpdateLikesCountRequest) (r *common.EmptyResponse, err error) {
	var _args LikeBFFMUpdateLikesCountArgs
	_args.Req = req
	var _result LikeBFFMUpdateLikesCountResult
	if err = p.Client_().Call(ctx, "MUpdateLikesCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type LikeBFFProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      LikeBFF
}

func (p *LikeBFFProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LikeBFFProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LikeBFFProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLikeBFFProcessor(handler LikeBFF) *LikeBFFProcessor {
	self := &LikeBFFProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Like", &likeBFFProcessorLike{handler: handler})
	self.AddToProcessorMap("Unlike", &likeBFFProcessorUnlike{handler: handler})
	self.AddToProcessorMap("GetLikedUsers", &likeBFFProcessorGetLikedUsers{handler: handler})
	self.AddToProcessorMap("GetRcvLikedList", &likeBFFProcessorGetRcvLikedList{handler: handler})
	self.AddToProcessorMap("GetPubLikedList", &likeBFFProcessorGetPubLikedList{handler: handler})
	self.AddToProcessorMap("GetLikedState", &likeBFFProcessorGetLikedState{handler: handler})
	self.AddToProcessorMap("GetLikedCount", &likeBFFProcessorGetLikedCount{handler: handler})
	self.AddToProcessorMap("MGetLikedState", &likeBFFProcessorMGetLikedState{handler: handler})
	self.AddToProcessorMap("MGetLikedCount", &likeBFFProcessorMGetLikedCount{handler: handler})
	self.AddToProcessorMap("UpdateLikeCount", &likeBFFProcessorUpdateLikeCount{handler: handler})
	self.AddToProcessorMap("MUpdateLikesCount", &likeBFFProcessorMUpdateLikesCount{handler: handler})
	return self
}
func (p *LikeBFFProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type likeBFFProcessorLike struct {
	handler LikeBFF
}

func (p *likeBFFProcessorLike) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeBFFLikeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Like", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeBFFLikeResult{}
	var retval *common.EmptyResponse
	if retval, err2 = p.handler.Like(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Like: "+err2.Error())
		oprot.WriteMessageBegin("Like", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Like", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeBFFProcessorUnlike struct {
	handler LikeBFF
}

func (p *likeBFFProcessorUnlike) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeBFFUnlikeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Unlike", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeBFFUnlikeResult{}
	var retval *common.EmptyResponse
	if retval, err2 = p.handler.Unlike(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Unlike: "+err2.Error())
		oprot.WriteMessageBegin("Unlike", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Unlike", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeBFFProcessorGetLikedUsers struct {
	handler LikeBFF
}

func (p *likeBFFProcessorGetLikedUsers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeBFFGetLikedUsersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLikedUsers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeBFFGetLikedUsersResult{}
	var retval *GetLikedUsersResponse
	if retval, err2 = p.handler.GetLikedUsers(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLikedUsers: "+err2.Error())
		oprot.WriteMessageBegin("GetLikedUsers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLikedUsers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeBFFProcessorGetRcvLikedList struct {
	handler LikeBFF
}

func (p *likeBFFProcessorGetRcvLikedList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeBFFGetRcvLikedListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetRcvLikedList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeBFFGetRcvLikedListResult{}
	var retval *GetLikedRecordResponse
	if retval, err2 = p.handler.GetRcvLikedList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRcvLikedList: "+err2.Error())
		oprot.WriteMessageBegin("GetRcvLikedList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetRcvLikedList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeBFFProcessorGetPubLikedList struct {
	handler LikeBFF
}

func (p *likeBFFProcessorGetPubLikedList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeBFFGetPubLikedListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPubLikedList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeBFFGetPubLikedListResult{}
	var retval *GetLikedRecordResponse
	if retval, err2 = p.handler.GetPubLikedList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPubLikedList: "+err2.Error())
		oprot.WriteMessageBegin("GetPubLikedList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPubLikedList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeBFFProcessorGetLikedState struct {
	handler LikeBFF
}

func (p *likeBFFProcessorGetLikedState) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeBFFGetLikedStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLikedState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeBFFGetLikedStateResult{}
	var retval *GetLikedStateResponse
	if retval, err2 = p.handler.GetLikedState(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLikedState: "+err2.Error())
		oprot.WriteMessageBegin("GetLikedState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLikedState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeBFFProcessorGetLikedCount struct {
	handler LikeBFF
}

func (p *likeBFFProcessorGetLikedCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeBFFGetLikedCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLikedCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeBFFGetLikedCountResult{}
	var retval *GetLikedCountResponse
	if retval, err2 = p.handler.GetLikedCount(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLikedCount: "+err2.Error())
		oprot.WriteMessageBegin("GetLikedCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLikedCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeBFFProcessorMGetLikedState struct {
	handler LikeBFF
}

func (p *likeBFFProcessorMGetLikedState) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeBFFMGetLikedStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MGetLikedState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeBFFMGetLikedStateResult{}
	var retval *MGetLikedStateResponse
	if retval, err2 = p.handler.MGetLikedState(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MGetLikedState: "+err2.Error())
		oprot.WriteMessageBegin("MGetLikedState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MGetLikedState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeBFFProcessorMGetLikedCount struct {
	handler LikeBFF
}

func (p *likeBFFProcessorMGetLikedCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeBFFMGetLikedCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MGetLikedCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeBFFMGetLikedCountResult{}
	var retval *MGetLikedCountResponse
	if retval, err2 = p.handler.MGetLikedCount(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MGetLikedCount: "+err2.Error())
		oprot.WriteMessageBegin("MGetLikedCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MGetLikedCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeBFFProcessorUpdateLikeCount struct {
	handler LikeBFF
}

func (p *likeBFFProcessorUpdateLikeCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeBFFUpdateLikeCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateLikeCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeBFFUpdateLikeCountResult{}
	var retval *common.EmptyResponse
	if retval, err2 = p.handler.UpdateLikeCount(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateLikeCount: "+err2.Error())
		oprot.WriteMessageBegin("UpdateLikeCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateLikeCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeBFFProcessorMUpdateLikesCount struct {
	handler LikeBFF
}

func (p *likeBFFProcessorMUpdateLikesCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeBFFMUpdateLikesCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MUpdateLikesCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeBFFMUpdateLikesCountResult{}
	var retval *common.EmptyResponse
	if retval, err2 = p.handler.MUpdateLikesCount(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MUpdateLikesCount: "+err2.Error())
		oprot.WriteMessageBegin("MUpdateLikesCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MUpdateLikesCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type LikeBFFLikeArgs struct {
	Req *LikeRequest `thrift:"req,1" frugal:"1,default,LikeRequest" json:"req"`
}

func NewLikeBFFLikeArgs() *LikeBFFLikeArgs {
	return &LikeBFFLikeArgs{}
}

func (p *LikeBFFLikeArgs) InitDefault() {
	*p = LikeBFFLikeArgs{}
}

var LikeBFFLikeArgs_Req_DEFAULT *LikeRequest

func (p *LikeBFFLikeArgs) GetReq() (v *LikeRequest) {
	if !p.IsSetReq() {
		return LikeBFFLikeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeBFFLikeArgs) SetReq(val *LikeRequest) {
	p.Req = val
}

var fieldIDToName_LikeBFFLikeArgs = map[int16]string{
	1: "req",
}

func (p *LikeBFFLikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeBFFLikeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFLikeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFLikeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewLikeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFLikeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Like_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFLikeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeBFFLikeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFLikeArgs(%+v)", *p)
}

func (p *LikeBFFLikeArgs) DeepEqual(ano *LikeBFFLikeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeBFFLikeArgs) Field1DeepEqual(src *LikeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFLikeResult struct {
	Success *common.EmptyResponse `thrift:"success,0,optional" frugal:"0,optional,common.EmptyResponse" json:"success,omitempty"`
}

func NewLikeBFFLikeResult() *LikeBFFLikeResult {
	return &LikeBFFLikeResult{}
}

func (p *LikeBFFLikeResult) InitDefault() {
	*p = LikeBFFLikeResult{}
}

var LikeBFFLikeResult_Success_DEFAULT *common.EmptyResponse

func (p *LikeBFFLikeResult) GetSuccess() (v *common.EmptyResponse) {
	if !p.IsSetSuccess() {
		return LikeBFFLikeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeBFFLikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.EmptyResponse)
}

var fieldIDToName_LikeBFFLikeResult = map[int16]string{
	0: "success",
}

func (p *LikeBFFLikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeBFFLikeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFLikeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFLikeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFLikeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Like_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFLikeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeBFFLikeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFLikeResult(%+v)", *p)
}

func (p *LikeBFFLikeResult) DeepEqual(ano *LikeBFFLikeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeBFFLikeResult) Field0DeepEqual(src *common.EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFUnlikeArgs struct {
	Req *LikeRequest `thrift:"req,1" frugal:"1,default,LikeRequest" json:"req"`
}

func NewLikeBFFUnlikeArgs() *LikeBFFUnlikeArgs {
	return &LikeBFFUnlikeArgs{}
}

func (p *LikeBFFUnlikeArgs) InitDefault() {
	*p = LikeBFFUnlikeArgs{}
}

var LikeBFFUnlikeArgs_Req_DEFAULT *LikeRequest

func (p *LikeBFFUnlikeArgs) GetReq() (v *LikeRequest) {
	if !p.IsSetReq() {
		return LikeBFFUnlikeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeBFFUnlikeArgs) SetReq(val *LikeRequest) {
	p.Req = val
}

var fieldIDToName_LikeBFFUnlikeArgs = map[int16]string{
	1: "req",
}

func (p *LikeBFFUnlikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeBFFUnlikeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFUnlikeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFUnlikeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewLikeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFUnlikeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Unlike_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFUnlikeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeBFFUnlikeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFUnlikeArgs(%+v)", *p)
}

func (p *LikeBFFUnlikeArgs) DeepEqual(ano *LikeBFFUnlikeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeBFFUnlikeArgs) Field1DeepEqual(src *LikeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFUnlikeResult struct {
	Success *common.EmptyResponse `thrift:"success,0,optional" frugal:"0,optional,common.EmptyResponse" json:"success,omitempty"`
}

func NewLikeBFFUnlikeResult() *LikeBFFUnlikeResult {
	return &LikeBFFUnlikeResult{}
}

func (p *LikeBFFUnlikeResult) InitDefault() {
	*p = LikeBFFUnlikeResult{}
}

var LikeBFFUnlikeResult_Success_DEFAULT *common.EmptyResponse

func (p *LikeBFFUnlikeResult) GetSuccess() (v *common.EmptyResponse) {
	if !p.IsSetSuccess() {
		return LikeBFFUnlikeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeBFFUnlikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.EmptyResponse)
}

var fieldIDToName_LikeBFFUnlikeResult = map[int16]string{
	0: "success",
}

func (p *LikeBFFUnlikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeBFFUnlikeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFUnlikeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFUnlikeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFUnlikeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Unlike_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFUnlikeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeBFFUnlikeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFUnlikeResult(%+v)", *p)
}

func (p *LikeBFFUnlikeResult) DeepEqual(ano *LikeBFFUnlikeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeBFFUnlikeResult) Field0DeepEqual(src *common.EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFGetLikedUsersArgs struct {
	Req *GetLikedUsersRequest `thrift:"req,1" frugal:"1,default,GetLikedUsersRequest" json:"req"`
}

func NewLikeBFFGetLikedUsersArgs() *LikeBFFGetLikedUsersArgs {
	return &LikeBFFGetLikedUsersArgs{}
}

func (p *LikeBFFGetLikedUsersArgs) InitDefault() {
	*p = LikeBFFGetLikedUsersArgs{}
}

var LikeBFFGetLikedUsersArgs_Req_DEFAULT *GetLikedUsersRequest

func (p *LikeBFFGetLikedUsersArgs) GetReq() (v *GetLikedUsersRequest) {
	if !p.IsSetReq() {
		return LikeBFFGetLikedUsersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeBFFGetLikedUsersArgs) SetReq(val *GetLikedUsersRequest) {
	p.Req = val
}

var fieldIDToName_LikeBFFGetLikedUsersArgs = map[int16]string{
	1: "req",
}

func (p *LikeBFFGetLikedUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeBFFGetLikedUsersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFGetLikedUsersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFGetLikedUsersArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetLikedUsersRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFGetLikedUsersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedUsers_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFGetLikedUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeBFFGetLikedUsersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFGetLikedUsersArgs(%+v)", *p)
}

func (p *LikeBFFGetLikedUsersArgs) DeepEqual(ano *LikeBFFGetLikedUsersArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeBFFGetLikedUsersArgs) Field1DeepEqual(src *GetLikedUsersRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFGetLikedUsersResult struct {
	Success *GetLikedUsersResponse `thrift:"success,0,optional" frugal:"0,optional,GetLikedUsersResponse" json:"success,omitempty"`
}

func NewLikeBFFGetLikedUsersResult() *LikeBFFGetLikedUsersResult {
	return &LikeBFFGetLikedUsersResult{}
}

func (p *LikeBFFGetLikedUsersResult) InitDefault() {
	*p = LikeBFFGetLikedUsersResult{}
}

var LikeBFFGetLikedUsersResult_Success_DEFAULT *GetLikedUsersResponse

func (p *LikeBFFGetLikedUsersResult) GetSuccess() (v *GetLikedUsersResponse) {
	if !p.IsSetSuccess() {
		return LikeBFFGetLikedUsersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeBFFGetLikedUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLikedUsersResponse)
}

var fieldIDToName_LikeBFFGetLikedUsersResult = map[int16]string{
	0: "success",
}

func (p *LikeBFFGetLikedUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeBFFGetLikedUsersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFGetLikedUsersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFGetLikedUsersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetLikedUsersResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFGetLikedUsersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedUsers_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFGetLikedUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeBFFGetLikedUsersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFGetLikedUsersResult(%+v)", *p)
}

func (p *LikeBFFGetLikedUsersResult) DeepEqual(ano *LikeBFFGetLikedUsersResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeBFFGetLikedUsersResult) Field0DeepEqual(src *GetLikedUsersResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFGetRcvLikedListArgs struct {
	Req *GetLikedRecordRequest `thrift:"req,1" frugal:"1,default,GetLikedRecordRequest" json:"req"`
}

func NewLikeBFFGetRcvLikedListArgs() *LikeBFFGetRcvLikedListArgs {
	return &LikeBFFGetRcvLikedListArgs{}
}

func (p *LikeBFFGetRcvLikedListArgs) InitDefault() {
	*p = LikeBFFGetRcvLikedListArgs{}
}

var LikeBFFGetRcvLikedListArgs_Req_DEFAULT *GetLikedRecordRequest

func (p *LikeBFFGetRcvLikedListArgs) GetReq() (v *GetLikedRecordRequest) {
	if !p.IsSetReq() {
		return LikeBFFGetRcvLikedListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeBFFGetRcvLikedListArgs) SetReq(val *GetLikedRecordRequest) {
	p.Req = val
}

var fieldIDToName_LikeBFFGetRcvLikedListArgs = map[int16]string{
	1: "req",
}

func (p *LikeBFFGetRcvLikedListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeBFFGetRcvLikedListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFGetRcvLikedListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFGetRcvLikedListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetLikedRecordRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFGetRcvLikedListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRcvLikedList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFGetRcvLikedListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeBFFGetRcvLikedListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFGetRcvLikedListArgs(%+v)", *p)
}

func (p *LikeBFFGetRcvLikedListArgs) DeepEqual(ano *LikeBFFGetRcvLikedListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeBFFGetRcvLikedListArgs) Field1DeepEqual(src *GetLikedRecordRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFGetRcvLikedListResult struct {
	Success *GetLikedRecordResponse `thrift:"success,0,optional" frugal:"0,optional,GetLikedRecordResponse" json:"success,omitempty"`
}

func NewLikeBFFGetRcvLikedListResult() *LikeBFFGetRcvLikedListResult {
	return &LikeBFFGetRcvLikedListResult{}
}

func (p *LikeBFFGetRcvLikedListResult) InitDefault() {
	*p = LikeBFFGetRcvLikedListResult{}
}

var LikeBFFGetRcvLikedListResult_Success_DEFAULT *GetLikedRecordResponse

func (p *LikeBFFGetRcvLikedListResult) GetSuccess() (v *GetLikedRecordResponse) {
	if !p.IsSetSuccess() {
		return LikeBFFGetRcvLikedListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeBFFGetRcvLikedListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLikedRecordResponse)
}

var fieldIDToName_LikeBFFGetRcvLikedListResult = map[int16]string{
	0: "success",
}

func (p *LikeBFFGetRcvLikedListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeBFFGetRcvLikedListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFGetRcvLikedListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFGetRcvLikedListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetLikedRecordResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFGetRcvLikedListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRcvLikedList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFGetRcvLikedListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeBFFGetRcvLikedListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFGetRcvLikedListResult(%+v)", *p)
}

func (p *LikeBFFGetRcvLikedListResult) DeepEqual(ano *LikeBFFGetRcvLikedListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeBFFGetRcvLikedListResult) Field0DeepEqual(src *GetLikedRecordResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFGetPubLikedListArgs struct {
	Req *GetLikedRecordRequest `thrift:"req,1" frugal:"1,default,GetLikedRecordRequest" json:"req"`
}

func NewLikeBFFGetPubLikedListArgs() *LikeBFFGetPubLikedListArgs {
	return &LikeBFFGetPubLikedListArgs{}
}

func (p *LikeBFFGetPubLikedListArgs) InitDefault() {
	*p = LikeBFFGetPubLikedListArgs{}
}

var LikeBFFGetPubLikedListArgs_Req_DEFAULT *GetLikedRecordRequest

func (p *LikeBFFGetPubLikedListArgs) GetReq() (v *GetLikedRecordRequest) {
	if !p.IsSetReq() {
		return LikeBFFGetPubLikedListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeBFFGetPubLikedListArgs) SetReq(val *GetLikedRecordRequest) {
	p.Req = val
}

var fieldIDToName_LikeBFFGetPubLikedListArgs = map[int16]string{
	1: "req",
}

func (p *LikeBFFGetPubLikedListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeBFFGetPubLikedListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFGetPubLikedListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFGetPubLikedListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetLikedRecordRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFGetPubLikedListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPubLikedList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFGetPubLikedListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeBFFGetPubLikedListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFGetPubLikedListArgs(%+v)", *p)
}

func (p *LikeBFFGetPubLikedListArgs) DeepEqual(ano *LikeBFFGetPubLikedListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeBFFGetPubLikedListArgs) Field1DeepEqual(src *GetLikedRecordRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFGetPubLikedListResult struct {
	Success *GetLikedRecordResponse `thrift:"success,0,optional" frugal:"0,optional,GetLikedRecordResponse" json:"success,omitempty"`
}

func NewLikeBFFGetPubLikedListResult() *LikeBFFGetPubLikedListResult {
	return &LikeBFFGetPubLikedListResult{}
}

func (p *LikeBFFGetPubLikedListResult) InitDefault() {
	*p = LikeBFFGetPubLikedListResult{}
}

var LikeBFFGetPubLikedListResult_Success_DEFAULT *GetLikedRecordResponse

func (p *LikeBFFGetPubLikedListResult) GetSuccess() (v *GetLikedRecordResponse) {
	if !p.IsSetSuccess() {
		return LikeBFFGetPubLikedListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeBFFGetPubLikedListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLikedRecordResponse)
}

var fieldIDToName_LikeBFFGetPubLikedListResult = map[int16]string{
	0: "success",
}

func (p *LikeBFFGetPubLikedListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeBFFGetPubLikedListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFGetPubLikedListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFGetPubLikedListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetLikedRecordResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFGetPubLikedListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPubLikedList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFGetPubLikedListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeBFFGetPubLikedListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFGetPubLikedListResult(%+v)", *p)
}

func (p *LikeBFFGetPubLikedListResult) DeepEqual(ano *LikeBFFGetPubLikedListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeBFFGetPubLikedListResult) Field0DeepEqual(src *GetLikedRecordResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFGetLikedStateArgs struct {
	Req *GetLikedStateRequest `thrift:"req,1" frugal:"1,default,GetLikedStateRequest" json:"req"`
}

func NewLikeBFFGetLikedStateArgs() *LikeBFFGetLikedStateArgs {
	return &LikeBFFGetLikedStateArgs{}
}

func (p *LikeBFFGetLikedStateArgs) InitDefault() {
	*p = LikeBFFGetLikedStateArgs{}
}

var LikeBFFGetLikedStateArgs_Req_DEFAULT *GetLikedStateRequest

func (p *LikeBFFGetLikedStateArgs) GetReq() (v *GetLikedStateRequest) {
	if !p.IsSetReq() {
		return LikeBFFGetLikedStateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeBFFGetLikedStateArgs) SetReq(val *GetLikedStateRequest) {
	p.Req = val
}

var fieldIDToName_LikeBFFGetLikedStateArgs = map[int16]string{
	1: "req",
}

func (p *LikeBFFGetLikedStateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeBFFGetLikedStateArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFGetLikedStateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFGetLikedStateArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetLikedStateRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFGetLikedStateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedState_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFGetLikedStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeBFFGetLikedStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFGetLikedStateArgs(%+v)", *p)
}

func (p *LikeBFFGetLikedStateArgs) DeepEqual(ano *LikeBFFGetLikedStateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeBFFGetLikedStateArgs) Field1DeepEqual(src *GetLikedStateRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFGetLikedStateResult struct {
	Success *GetLikedStateResponse `thrift:"success,0,optional" frugal:"0,optional,GetLikedStateResponse" json:"success,omitempty"`
}

func NewLikeBFFGetLikedStateResult() *LikeBFFGetLikedStateResult {
	return &LikeBFFGetLikedStateResult{}
}

func (p *LikeBFFGetLikedStateResult) InitDefault() {
	*p = LikeBFFGetLikedStateResult{}
}

var LikeBFFGetLikedStateResult_Success_DEFAULT *GetLikedStateResponse

func (p *LikeBFFGetLikedStateResult) GetSuccess() (v *GetLikedStateResponse) {
	if !p.IsSetSuccess() {
		return LikeBFFGetLikedStateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeBFFGetLikedStateResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLikedStateResponse)
}

var fieldIDToName_LikeBFFGetLikedStateResult = map[int16]string{
	0: "success",
}

func (p *LikeBFFGetLikedStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeBFFGetLikedStateResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFGetLikedStateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFGetLikedStateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetLikedStateResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFGetLikedStateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedState_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFGetLikedStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeBFFGetLikedStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFGetLikedStateResult(%+v)", *p)
}

func (p *LikeBFFGetLikedStateResult) DeepEqual(ano *LikeBFFGetLikedStateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeBFFGetLikedStateResult) Field0DeepEqual(src *GetLikedStateResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFGetLikedCountArgs struct {
	Req *GetLikedCountRequest `thrift:"req,1" frugal:"1,default,GetLikedCountRequest" json:"req"`
}

func NewLikeBFFGetLikedCountArgs() *LikeBFFGetLikedCountArgs {
	return &LikeBFFGetLikedCountArgs{}
}

func (p *LikeBFFGetLikedCountArgs) InitDefault() {
	*p = LikeBFFGetLikedCountArgs{}
}

var LikeBFFGetLikedCountArgs_Req_DEFAULT *GetLikedCountRequest

func (p *LikeBFFGetLikedCountArgs) GetReq() (v *GetLikedCountRequest) {
	if !p.IsSetReq() {
		return LikeBFFGetLikedCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeBFFGetLikedCountArgs) SetReq(val *GetLikedCountRequest) {
	p.Req = val
}

var fieldIDToName_LikeBFFGetLikedCountArgs = map[int16]string{
	1: "req",
}

func (p *LikeBFFGetLikedCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeBFFGetLikedCountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFGetLikedCountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFGetLikedCountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetLikedCountRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFGetLikedCountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedCount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFGetLikedCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeBFFGetLikedCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFGetLikedCountArgs(%+v)", *p)
}

func (p *LikeBFFGetLikedCountArgs) DeepEqual(ano *LikeBFFGetLikedCountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeBFFGetLikedCountArgs) Field1DeepEqual(src *GetLikedCountRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFGetLikedCountResult struct {
	Success *GetLikedCountResponse `thrift:"success,0,optional" frugal:"0,optional,GetLikedCountResponse" json:"success,omitempty"`
}

func NewLikeBFFGetLikedCountResult() *LikeBFFGetLikedCountResult {
	return &LikeBFFGetLikedCountResult{}
}

func (p *LikeBFFGetLikedCountResult) InitDefault() {
	*p = LikeBFFGetLikedCountResult{}
}

var LikeBFFGetLikedCountResult_Success_DEFAULT *GetLikedCountResponse

func (p *LikeBFFGetLikedCountResult) GetSuccess() (v *GetLikedCountResponse) {
	if !p.IsSetSuccess() {
		return LikeBFFGetLikedCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeBFFGetLikedCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLikedCountResponse)
}

var fieldIDToName_LikeBFFGetLikedCountResult = map[int16]string{
	0: "success",
}

func (p *LikeBFFGetLikedCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeBFFGetLikedCountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFGetLikedCountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFGetLikedCountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetLikedCountResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFGetLikedCountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedCount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFGetLikedCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeBFFGetLikedCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFGetLikedCountResult(%+v)", *p)
}

func (p *LikeBFFGetLikedCountResult) DeepEqual(ano *LikeBFFGetLikedCountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeBFFGetLikedCountResult) Field0DeepEqual(src *GetLikedCountResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFMGetLikedStateArgs struct {
	Req *MGetLikedStateRequest `thrift:"req,1" frugal:"1,default,MGetLikedStateRequest" json:"req"`
}

func NewLikeBFFMGetLikedStateArgs() *LikeBFFMGetLikedStateArgs {
	return &LikeBFFMGetLikedStateArgs{}
}

func (p *LikeBFFMGetLikedStateArgs) InitDefault() {
	*p = LikeBFFMGetLikedStateArgs{}
}

var LikeBFFMGetLikedStateArgs_Req_DEFAULT *MGetLikedStateRequest

func (p *LikeBFFMGetLikedStateArgs) GetReq() (v *MGetLikedStateRequest) {
	if !p.IsSetReq() {
		return LikeBFFMGetLikedStateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeBFFMGetLikedStateArgs) SetReq(val *MGetLikedStateRequest) {
	p.Req = val
}

var fieldIDToName_LikeBFFMGetLikedStateArgs = map[int16]string{
	1: "req",
}

func (p *LikeBFFMGetLikedStateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeBFFMGetLikedStateArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFMGetLikedStateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFMGetLikedStateArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMGetLikedStateRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFMGetLikedStateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedState_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFMGetLikedStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeBFFMGetLikedStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFMGetLikedStateArgs(%+v)", *p)
}

func (p *LikeBFFMGetLikedStateArgs) DeepEqual(ano *LikeBFFMGetLikedStateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeBFFMGetLikedStateArgs) Field1DeepEqual(src *MGetLikedStateRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFMGetLikedStateResult struct {
	Success *MGetLikedStateResponse `thrift:"success,0,optional" frugal:"0,optional,MGetLikedStateResponse" json:"success,omitempty"`
}

func NewLikeBFFMGetLikedStateResult() *LikeBFFMGetLikedStateResult {
	return &LikeBFFMGetLikedStateResult{}
}

func (p *LikeBFFMGetLikedStateResult) InitDefault() {
	*p = LikeBFFMGetLikedStateResult{}
}

var LikeBFFMGetLikedStateResult_Success_DEFAULT *MGetLikedStateResponse

func (p *LikeBFFMGetLikedStateResult) GetSuccess() (v *MGetLikedStateResponse) {
	if !p.IsSetSuccess() {
		return LikeBFFMGetLikedStateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeBFFMGetLikedStateResult) SetSuccess(x interface{}) {
	p.Success = x.(*MGetLikedStateResponse)
}

var fieldIDToName_LikeBFFMGetLikedStateResult = map[int16]string{
	0: "success",
}

func (p *LikeBFFMGetLikedStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeBFFMGetLikedStateResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFMGetLikedStateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFMGetLikedStateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMGetLikedStateResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFMGetLikedStateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedState_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFMGetLikedStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeBFFMGetLikedStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFMGetLikedStateResult(%+v)", *p)
}

func (p *LikeBFFMGetLikedStateResult) DeepEqual(ano *LikeBFFMGetLikedStateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeBFFMGetLikedStateResult) Field0DeepEqual(src *MGetLikedStateResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFMGetLikedCountArgs struct {
	Req *MGetLikedCountRequest `thrift:"req,1" frugal:"1,default,MGetLikedCountRequest" json:"req"`
}

func NewLikeBFFMGetLikedCountArgs() *LikeBFFMGetLikedCountArgs {
	return &LikeBFFMGetLikedCountArgs{}
}

func (p *LikeBFFMGetLikedCountArgs) InitDefault() {
	*p = LikeBFFMGetLikedCountArgs{}
}

var LikeBFFMGetLikedCountArgs_Req_DEFAULT *MGetLikedCountRequest

func (p *LikeBFFMGetLikedCountArgs) GetReq() (v *MGetLikedCountRequest) {
	if !p.IsSetReq() {
		return LikeBFFMGetLikedCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeBFFMGetLikedCountArgs) SetReq(val *MGetLikedCountRequest) {
	p.Req = val
}

var fieldIDToName_LikeBFFMGetLikedCountArgs = map[int16]string{
	1: "req",
}

func (p *LikeBFFMGetLikedCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeBFFMGetLikedCountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFMGetLikedCountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFMGetLikedCountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMGetLikedCountRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFMGetLikedCountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedCount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFMGetLikedCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeBFFMGetLikedCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFMGetLikedCountArgs(%+v)", *p)
}

func (p *LikeBFFMGetLikedCountArgs) DeepEqual(ano *LikeBFFMGetLikedCountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeBFFMGetLikedCountArgs) Field1DeepEqual(src *MGetLikedCountRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFMGetLikedCountResult struct {
	Success *MGetLikedCountResponse `thrift:"success,0,optional" frugal:"0,optional,MGetLikedCountResponse" json:"success,omitempty"`
}

func NewLikeBFFMGetLikedCountResult() *LikeBFFMGetLikedCountResult {
	return &LikeBFFMGetLikedCountResult{}
}

func (p *LikeBFFMGetLikedCountResult) InitDefault() {
	*p = LikeBFFMGetLikedCountResult{}
}

var LikeBFFMGetLikedCountResult_Success_DEFAULT *MGetLikedCountResponse

func (p *LikeBFFMGetLikedCountResult) GetSuccess() (v *MGetLikedCountResponse) {
	if !p.IsSetSuccess() {
		return LikeBFFMGetLikedCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeBFFMGetLikedCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*MGetLikedCountResponse)
}

var fieldIDToName_LikeBFFMGetLikedCountResult = map[int16]string{
	0: "success",
}

func (p *LikeBFFMGetLikedCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeBFFMGetLikedCountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFMGetLikedCountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFMGetLikedCountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMGetLikedCountResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFMGetLikedCountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedCount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFMGetLikedCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeBFFMGetLikedCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFMGetLikedCountResult(%+v)", *p)
}

func (p *LikeBFFMGetLikedCountResult) DeepEqual(ano *LikeBFFMGetLikedCountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeBFFMGetLikedCountResult) Field0DeepEqual(src *MGetLikedCountResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFUpdateLikeCountArgs struct {
	Req *UpdateLikeCountRequest `thrift:"req,1" frugal:"1,default,UpdateLikeCountRequest" json:"req"`
}

func NewLikeBFFUpdateLikeCountArgs() *LikeBFFUpdateLikeCountArgs {
	return &LikeBFFUpdateLikeCountArgs{}
}

func (p *LikeBFFUpdateLikeCountArgs) InitDefault() {
	*p = LikeBFFUpdateLikeCountArgs{}
}

var LikeBFFUpdateLikeCountArgs_Req_DEFAULT *UpdateLikeCountRequest

func (p *LikeBFFUpdateLikeCountArgs) GetReq() (v *UpdateLikeCountRequest) {
	if !p.IsSetReq() {
		return LikeBFFUpdateLikeCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeBFFUpdateLikeCountArgs) SetReq(val *UpdateLikeCountRequest) {
	p.Req = val
}

var fieldIDToName_LikeBFFUpdateLikeCountArgs = map[int16]string{
	1: "req",
}

func (p *LikeBFFUpdateLikeCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeBFFUpdateLikeCountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFUpdateLikeCountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFUpdateLikeCountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUpdateLikeCountRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFUpdateLikeCountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateLikeCount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFUpdateLikeCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeBFFUpdateLikeCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFUpdateLikeCountArgs(%+v)", *p)
}

func (p *LikeBFFUpdateLikeCountArgs) DeepEqual(ano *LikeBFFUpdateLikeCountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeBFFUpdateLikeCountArgs) Field1DeepEqual(src *UpdateLikeCountRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFUpdateLikeCountResult struct {
	Success *common.EmptyResponse `thrift:"success,0,optional" frugal:"0,optional,common.EmptyResponse" json:"success,omitempty"`
}

func NewLikeBFFUpdateLikeCountResult() *LikeBFFUpdateLikeCountResult {
	return &LikeBFFUpdateLikeCountResult{}
}

func (p *LikeBFFUpdateLikeCountResult) InitDefault() {
	*p = LikeBFFUpdateLikeCountResult{}
}

var LikeBFFUpdateLikeCountResult_Success_DEFAULT *common.EmptyResponse

func (p *LikeBFFUpdateLikeCountResult) GetSuccess() (v *common.EmptyResponse) {
	if !p.IsSetSuccess() {
		return LikeBFFUpdateLikeCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeBFFUpdateLikeCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.EmptyResponse)
}

var fieldIDToName_LikeBFFUpdateLikeCountResult = map[int16]string{
	0: "success",
}

func (p *LikeBFFUpdateLikeCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeBFFUpdateLikeCountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFUpdateLikeCountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFUpdateLikeCountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFUpdateLikeCountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateLikeCount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFUpdateLikeCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeBFFUpdateLikeCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFUpdateLikeCountResult(%+v)", *p)
}

func (p *LikeBFFUpdateLikeCountResult) DeepEqual(ano *LikeBFFUpdateLikeCountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeBFFUpdateLikeCountResult) Field0DeepEqual(src *common.EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFMUpdateLikesCountArgs struct {
	Req *MUpdateLikesCountRequest `thrift:"req,1" frugal:"1,default,MUpdateLikesCountRequest" json:"req"`
}

func NewLikeBFFMUpdateLikesCountArgs() *LikeBFFMUpdateLikesCountArgs {
	return &LikeBFFMUpdateLikesCountArgs{}
}

func (p *LikeBFFMUpdateLikesCountArgs) InitDefault() {
	*p = LikeBFFMUpdateLikesCountArgs{}
}

var LikeBFFMUpdateLikesCountArgs_Req_DEFAULT *MUpdateLikesCountRequest

func (p *LikeBFFMUpdateLikesCountArgs) GetReq() (v *MUpdateLikesCountRequest) {
	if !p.IsSetReq() {
		return LikeBFFMUpdateLikesCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeBFFMUpdateLikesCountArgs) SetReq(val *MUpdateLikesCountRequest) {
	p.Req = val
}

var fieldIDToName_LikeBFFMUpdateLikesCountArgs = map[int16]string{
	1: "req",
}

func (p *LikeBFFMUpdateLikesCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeBFFMUpdateLikesCountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFMUpdateLikesCountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFMUpdateLikesCountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMUpdateLikesCountRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFMUpdateLikesCountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MUpdateLikesCount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFMUpdateLikesCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeBFFMUpdateLikesCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFMUpdateLikesCountArgs(%+v)", *p)
}

func (p *LikeBFFMUpdateLikesCountArgs) DeepEqual(ano *LikeBFFMUpdateLikesCountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeBFFMUpdateLikesCountArgs) Field1DeepEqual(src *MUpdateLikesCountRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeBFFMUpdateLikesCountResult struct {
	Success *common.EmptyResponse `thrift:"success,0,optional" frugal:"0,optional,common.EmptyResponse" json:"success,omitempty"`
}

func NewLikeBFFMUpdateLikesCountResult() *LikeBFFMUpdateLikesCountResult {
	return &LikeBFFMUpdateLikesCountResult{}
}

func (p *LikeBFFMUpdateLikesCountResult) InitDefault() {
	*p = LikeBFFMUpdateLikesCountResult{}
}

var LikeBFFMUpdateLikesCountResult_Success_DEFAULT *common.EmptyResponse

func (p *LikeBFFMUpdateLikesCountResult) GetSuccess() (v *common.EmptyResponse) {
	if !p.IsSetSuccess() {
		return LikeBFFMUpdateLikesCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeBFFMUpdateLikesCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.EmptyResponse)
}

var fieldIDToName_LikeBFFMUpdateLikesCountResult = map[int16]string{
	0: "success",
}

func (p *LikeBFFMUpdateLikesCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeBFFMUpdateLikesCountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeBFFMUpdateLikesCountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeBFFMUpdateLikesCountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeBFFMUpdateLikesCountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MUpdateLikesCount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeBFFMUpdateLikesCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeBFFMUpdateLikesCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeBFFMUpdateLikesCountResult(%+v)", *p)
}

func (p *LikeBFFMUpdateLikesCountResult) DeepEqual(ano *LikeBFFMUpdateLikesCountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeBFFMUpdateLikesCountResult) Field0DeepEqual(src *common.EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
