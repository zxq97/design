// Code generated by Kitex v0.5.0. DO NOT EDIT.

package archiveservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	archive "github.com/zxq97/design/weitter/archive/kitex_gen/archive"
)

func serviceInfo() *kitex.ServiceInfo {
	return archiveServiceServiceInfo
}

var archiveServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ArchiveService"
	handlerType := (*archive.ArchiveService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateArticle":   kitex.NewMethodInfo(createArticleHandler, newArchiveServiceCreateArticleArgs, newArchiveServiceCreateArticleResult, false),
		"MGetArticles":    kitex.NewMethodInfo(mGetArticlesHandler, newArchiveServiceMGetArticlesArgs, newArchiveServiceMGetArticlesResult, false),
		"GetUserArticles": kitex.NewMethodInfo(getUserArticlesHandler, newArchiveServiceGetUserArticlesArgs, newArchiveServiceGetUserArticlesResult, false),
		"DeleteArticles":  kitex.NewMethodInfo(deleteArticlesHandler, newArchiveServiceDeleteArticlesArgs, newArchiveServiceDeleteArticlesResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "archive",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.0",
		Extra:           extra,
	}
	return svcInfo
}

func createArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*archive.ArchiveServiceCreateArticleArgs)
	realResult := result.(*archive.ArchiveServiceCreateArticleResult)
	success, err := handler.(archive.ArchiveService).CreateArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArchiveServiceCreateArticleArgs() interface{} {
	return archive.NewArchiveServiceCreateArticleArgs()
}

func newArchiveServiceCreateArticleResult() interface{} {
	return archive.NewArchiveServiceCreateArticleResult()
}

func mGetArticlesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*archive.ArchiveServiceMGetArticlesArgs)
	realResult := result.(*archive.ArchiveServiceMGetArticlesResult)
	success, err := handler.(archive.ArchiveService).MGetArticles(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArchiveServiceMGetArticlesArgs() interface{} {
	return archive.NewArchiveServiceMGetArticlesArgs()
}

func newArchiveServiceMGetArticlesResult() interface{} {
	return archive.NewArchiveServiceMGetArticlesResult()
}

func getUserArticlesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*archive.ArchiveServiceGetUserArticlesArgs)
	realResult := result.(*archive.ArchiveServiceGetUserArticlesResult)
	success, err := handler.(archive.ArchiveService).GetUserArticles(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArchiveServiceGetUserArticlesArgs() interface{} {
	return archive.NewArchiveServiceGetUserArticlesArgs()
}

func newArchiveServiceGetUserArticlesResult() interface{} {
	return archive.NewArchiveServiceGetUserArticlesResult()
}

func deleteArticlesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*archive.ArchiveServiceDeleteArticlesArgs)
	realResult := result.(*archive.ArchiveServiceDeleteArticlesResult)
	success, err := handler.(archive.ArchiveService).DeleteArticles(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArchiveServiceDeleteArticlesArgs() interface{} {
	return archive.NewArchiveServiceDeleteArticlesArgs()
}

func newArchiveServiceDeleteArticlesResult() interface{} {
	return archive.NewArchiveServiceDeleteArticlesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateArticle(ctx context.Context, req *archive.CreateArticleRequest) (r *archive.EmptyResponse, err error) {
	var _args archive.ArchiveServiceCreateArticleArgs
	_args.Req = req
	var _result archive.ArchiveServiceCreateArticleResult
	if err = p.c.Call(ctx, "CreateArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetArticles(ctx context.Context, req *archive.MGetArticlesRequest) (r *archive.MGetArticleResponse, err error) {
	var _args archive.ArchiveServiceMGetArticlesArgs
	_args.Req = req
	var _result archive.ArchiveServiceMGetArticlesResult
	if err = p.c.Call(ctx, "MGetArticles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserArticles(ctx context.Context, req *archive.GetUserArticlesRequest) (r *archive.GetUserArticlesResponse, err error) {
	var _args archive.ArchiveServiceGetUserArticlesArgs
	_args.Req = req
	var _result archive.ArchiveServiceGetUserArticlesResult
	if err = p.c.Call(ctx, "GetUserArticles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteArticles(ctx context.Context, req *archive.DelectArticlesRequest) (r *archive.EmptyResponse, err error) {
	var _args archive.ArchiveServiceDeleteArticlesArgs
	_args.Req = req
	var _result archive.ArchiveServiceDeleteArticlesResult
	if err = p.c.Call(ctx, "DeleteArticles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
