// Code generated by thriftgo (0.2.8). DO NOT EDIT.

package like

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type EmptyResponse struct {
}

func NewEmptyResponse() *EmptyResponse {
	return &EmptyResponse{}
}

func (p *EmptyResponse) InitDefault() {
	*p = EmptyResponse{}
}

var fieldIDToName_EmptyResponse = map[int16]string{}

func (p *EmptyResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmptyResponse) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("EmptyResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmptyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmptyResponse(%+v)", *p)
}

func (p *EmptyResponse) DeepEqual(ano *EmptyResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type LikeItem struct {
	ObjId   int64 `thrift:"obj_id,1" frugal:"1,default,i64" json:"obj_id"`
	ObjType int32 `thrift:"obj_type,2" frugal:"2,default,i32" json:"obj_type"`
	Uid     int64 `thrift:"uid,3" frugal:"3,default,i64" json:"uid"`
}

func NewLikeItem() *LikeItem {
	return &LikeItem{}
}

func (p *LikeItem) InitDefault() {
	*p = LikeItem{}
}

func (p *LikeItem) GetObjId() (v int64) {
	return p.ObjId
}

func (p *LikeItem) GetObjType() (v int32) {
	return p.ObjType
}

func (p *LikeItem) GetUid() (v int64) {
	return p.Uid
}
func (p *LikeItem) SetObjId(val int64) {
	p.ObjId = val
}
func (p *LikeItem) SetObjType(val int32) {
	p.ObjType = val
}
func (p *LikeItem) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_LikeItem = map[int16]string{
	1: "obj_id",
	2: "obj_type",
	3: "uid",
}

func (p *LikeItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ObjId = v
	}
	return nil
}

func (p *LikeItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ObjType = v
	}
	return nil
}

func (p *LikeItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *LikeItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LikeItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ObjId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ObjType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LikeItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LikeItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeItem(%+v)", *p)
}

func (p *LikeItem) DeepEqual(ano *LikeItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ObjId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *LikeItem) Field1DeepEqual(src int64) bool {

	if p.ObjId != src {
		return false
	}
	return true
}
func (p *LikeItem) Field2DeepEqual(src int32) bool {

	if p.ObjType != src {
		return false
	}
	return true
}
func (p *LikeItem) Field3DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type LikeRequest struct {
	ObjId   int64 `thrift:"obj_id,1" frugal:"1,default,i64" json:"obj_id"`
	ObjType int32 `thrift:"obj_type,2" frugal:"2,default,i32" json:"obj_type"`
	Uid     int64 `thrift:"uid,3" frugal:"3,default,i64" json:"uid"`
	Author  int64 `thrift:"author,4" frugal:"4,default,i64" json:"author"`
}

func NewLikeRequest() *LikeRequest {
	return &LikeRequest{}
}

func (p *LikeRequest) InitDefault() {
	*p = LikeRequest{}
}

func (p *LikeRequest) GetObjId() (v int64) {
	return p.ObjId
}

func (p *LikeRequest) GetObjType() (v int32) {
	return p.ObjType
}

func (p *LikeRequest) GetUid() (v int64) {
	return p.Uid
}

func (p *LikeRequest) GetAuthor() (v int64) {
	return p.Author
}
func (p *LikeRequest) SetObjId(val int64) {
	p.ObjId = val
}
func (p *LikeRequest) SetObjType(val int32) {
	p.ObjType = val
}
func (p *LikeRequest) SetUid(val int64) {
	p.Uid = val
}
func (p *LikeRequest) SetAuthor(val int64) {
	p.Author = val
}

var fieldIDToName_LikeRequest = map[int16]string{
	1: "obj_id",
	2: "obj_type",
	3: "uid",
	4: "author",
}

func (p *LikeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ObjId = v
	}
	return nil
}

func (p *LikeRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ObjType = v
	}
	return nil
}

func (p *LikeRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *LikeRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Author = v
	}
	return nil
}

func (p *LikeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LikeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ObjId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ObjType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LikeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LikeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("author", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Author); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *LikeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeRequest(%+v)", *p)
}

func (p *LikeRequest) DeepEqual(ano *LikeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ObjId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field4DeepEqual(ano.Author) {
		return false
	}
	return true
}

func (p *LikeRequest) Field1DeepEqual(src int64) bool {

	if p.ObjId != src {
		return false
	}
	return true
}
func (p *LikeRequest) Field2DeepEqual(src int32) bool {

	if p.ObjType != src {
		return false
	}
	return true
}
func (p *LikeRequest) Field3DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *LikeRequest) Field4DeepEqual(src int64) bool {

	if p.Author != src {
		return false
	}
	return true
}

type GetLikedUsersRequest struct {
	ObjId   int64 `thrift:"obj_id,1" frugal:"1,default,i64" json:"obj_id"`
	ObjType int32 `thrift:"obj_type,2" frugal:"2,default,i32" json:"obj_type"`
	LastUid int64 `thrift:"last_uid,3" frugal:"3,default,i64" json:"last_uid"`
	Limit   int8  `thrift:"limit,4" frugal:"4,default,i8" json:"limit"`
	Preload bool  `thrift:"preload,5" frugal:"5,default,bool" json:"preload"`
}

func NewGetLikedUsersRequest() *GetLikedUsersRequest {
	return &GetLikedUsersRequest{}
}

func (p *GetLikedUsersRequest) InitDefault() {
	*p = GetLikedUsersRequest{}
}

func (p *GetLikedUsersRequest) GetObjId() (v int64) {
	return p.ObjId
}

func (p *GetLikedUsersRequest) GetObjType() (v int32) {
	return p.ObjType
}

func (p *GetLikedUsersRequest) GetLastUid() (v int64) {
	return p.LastUid
}

func (p *GetLikedUsersRequest) GetLimit() (v int8) {
	return p.Limit
}

func (p *GetLikedUsersRequest) GetPreload() (v bool) {
	return p.Preload
}
func (p *GetLikedUsersRequest) SetObjId(val int64) {
	p.ObjId = val
}
func (p *GetLikedUsersRequest) SetObjType(val int32) {
	p.ObjType = val
}
func (p *GetLikedUsersRequest) SetLastUid(val int64) {
	p.LastUid = val
}
func (p *GetLikedUsersRequest) SetLimit(val int8) {
	p.Limit = val
}
func (p *GetLikedUsersRequest) SetPreload(val bool) {
	p.Preload = val
}

var fieldIDToName_GetLikedUsersRequest = map[int16]string{
	1: "obj_id",
	2: "obj_type",
	3: "last_uid",
	4: "limit",
	5: "preload",
}

func (p *GetLikedUsersRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLikedUsersRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLikedUsersRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ObjId = v
	}
	return nil
}

func (p *GetLikedUsersRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ObjType = v
	}
	return nil
}

func (p *GetLikedUsersRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.LastUid = v
	}
	return nil
}

func (p *GetLikedUsersRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *GetLikedUsersRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Preload = v
	}
	return nil
}

func (p *GetLikedUsersRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedUsersRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLikedUsersRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ObjId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLikedUsersRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ObjType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetLikedUsersRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("last_uid", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LastUid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetLikedUsersRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetLikedUsersRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("preload", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Preload); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetLikedUsersRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikedUsersRequest(%+v)", *p)
}

func (p *GetLikedUsersRequest) DeepEqual(ano *GetLikedUsersRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ObjId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjType) {
		return false
	}
	if !p.Field3DeepEqual(ano.LastUid) {
		return false
	}
	if !p.Field4DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field5DeepEqual(ano.Preload) {
		return false
	}
	return true
}

func (p *GetLikedUsersRequest) Field1DeepEqual(src int64) bool {

	if p.ObjId != src {
		return false
	}
	return true
}
func (p *GetLikedUsersRequest) Field2DeepEqual(src int32) bool {

	if p.ObjType != src {
		return false
	}
	return true
}
func (p *GetLikedUsersRequest) Field3DeepEqual(src int64) bool {

	if p.LastUid != src {
		return false
	}
	return true
}
func (p *GetLikedUsersRequest) Field4DeepEqual(src int8) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *GetLikedUsersRequest) Field5DeepEqual(src bool) bool {

	if p.Preload != src {
		return false
	}
	return true
}

type GetLikedUsersReponse struct {
	Uids    []int64 `thrift:"uids,1" frugal:"1,default,list<i64>" json:"uids"`
	HasMore bool    `thrift:"has_more,2" frugal:"2,default,bool" json:"has_more"`
}

func NewGetLikedUsersReponse() *GetLikedUsersReponse {
	return &GetLikedUsersReponse{}
}

func (p *GetLikedUsersReponse) InitDefault() {
	*p = GetLikedUsersReponse{}
}

func (p *GetLikedUsersReponse) GetUids() (v []int64) {
	return p.Uids
}

func (p *GetLikedUsersReponse) GetHasMore() (v bool) {
	return p.HasMore
}
func (p *GetLikedUsersReponse) SetUids(val []int64) {
	p.Uids = val
}
func (p *GetLikedUsersReponse) SetHasMore(val bool) {
	p.HasMore = val
}

var fieldIDToName_GetLikedUsersReponse = map[int16]string{
	1: "uids",
	2: "has_more",
}

func (p *GetLikedUsersReponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLikedUsersReponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLikedUsersReponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Uids = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Uids = append(p.Uids, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetLikedUsersReponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.HasMore = v
	}
	return nil
}

func (p *GetLikedUsersReponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedUsersReponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLikedUsersReponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Uids)); err != nil {
		return err
	}
	for _, v := range p.Uids {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLikedUsersReponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HasMore); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetLikedUsersReponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikedUsersReponse(%+v)", *p)
}

func (p *GetLikedUsersReponse) DeepEqual(ano *GetLikedUsersReponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uids) {
		return false
	}
	if !p.Field2DeepEqual(ano.HasMore) {
		return false
	}
	return true
}

func (p *GetLikedUsersReponse) Field1DeepEqual(src []int64) bool {

	if len(p.Uids) != len(src) {
		return false
	}
	for i, v := range p.Uids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *GetLikedUsersReponse) Field2DeepEqual(src bool) bool {

	if p.HasMore != src {
		return false
	}
	return true
}

type GetLikedRecordRequest struct {
	ObjId   int64 `thrift:"obj_id,1" frugal:"1,default,i64" json:"obj_id"`
	ObjType int32 `thrift:"obj_type,2" frugal:"2,default,i32" json:"obj_type"`
	Uid     int64 `thrift:"uid,3" frugal:"3,default,i64" json:"uid"`
	Author  int64 `thrift:"author,4" frugal:"4,default,i64" json:"author"`
	Limit   int8  `thrift:"limit,5" frugal:"5,default,i8" json:"limit"`
}

func NewGetLikedRecordRequest() *GetLikedRecordRequest {
	return &GetLikedRecordRequest{}
}

func (p *GetLikedRecordRequest) InitDefault() {
	*p = GetLikedRecordRequest{}
}

func (p *GetLikedRecordRequest) GetObjId() (v int64) {
	return p.ObjId
}

func (p *GetLikedRecordRequest) GetObjType() (v int32) {
	return p.ObjType
}

func (p *GetLikedRecordRequest) GetUid() (v int64) {
	return p.Uid
}

func (p *GetLikedRecordRequest) GetAuthor() (v int64) {
	return p.Author
}

func (p *GetLikedRecordRequest) GetLimit() (v int8) {
	return p.Limit
}
func (p *GetLikedRecordRequest) SetObjId(val int64) {
	p.ObjId = val
}
func (p *GetLikedRecordRequest) SetObjType(val int32) {
	p.ObjType = val
}
func (p *GetLikedRecordRequest) SetUid(val int64) {
	p.Uid = val
}
func (p *GetLikedRecordRequest) SetAuthor(val int64) {
	p.Author = val
}
func (p *GetLikedRecordRequest) SetLimit(val int8) {
	p.Limit = val
}

var fieldIDToName_GetLikedRecordRequest = map[int16]string{
	1: "obj_id",
	2: "obj_type",
	3: "uid",
	4: "author",
	5: "limit",
}

func (p *GetLikedRecordRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLikedRecordRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLikedRecordRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ObjId = v
	}
	return nil
}

func (p *GetLikedRecordRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ObjType = v
	}
	return nil
}

func (p *GetLikedRecordRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *GetLikedRecordRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Author = v
	}
	return nil
}

func (p *GetLikedRecordRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *GetLikedRecordRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedRecordRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLikedRecordRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ObjId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLikedRecordRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ObjType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetLikedRecordRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetLikedRecordRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("author", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Author); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetLikedRecordRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.BYTE, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetLikedRecordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikedRecordRequest(%+v)", *p)
}

func (p *GetLikedRecordRequest) DeepEqual(ano *GetLikedRecordRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ObjId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field4DeepEqual(ano.Author) {
		return false
	}
	if !p.Field5DeepEqual(ano.Limit) {
		return false
	}
	return true
}

func (p *GetLikedRecordRequest) Field1DeepEqual(src int64) bool {

	if p.ObjId != src {
		return false
	}
	return true
}
func (p *GetLikedRecordRequest) Field2DeepEqual(src int32) bool {

	if p.ObjType != src {
		return false
	}
	return true
}
func (p *GetLikedRecordRequest) Field3DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *GetLikedRecordRequest) Field4DeepEqual(src int64) bool {

	if p.Author != src {
		return false
	}
	return true
}
func (p *GetLikedRecordRequest) Field5DeepEqual(src int8) bool {

	if p.Limit != src {
		return false
	}
	return true
}

type GetLikedRecordResponse struct {
	Likes   []*LikeItem `thrift:"likes,1" frugal:"1,default,list<LikeItem>" json:"likes"`
	HasMore bool        `thrift:"has_more,2" frugal:"2,default,bool" json:"has_more"`
}

func NewGetLikedRecordResponse() *GetLikedRecordResponse {
	return &GetLikedRecordResponse{}
}

func (p *GetLikedRecordResponse) InitDefault() {
	*p = GetLikedRecordResponse{}
}

func (p *GetLikedRecordResponse) GetLikes() (v []*LikeItem) {
	return p.Likes
}

func (p *GetLikedRecordResponse) GetHasMore() (v bool) {
	return p.HasMore
}
func (p *GetLikedRecordResponse) SetLikes(val []*LikeItem) {
	p.Likes = val
}
func (p *GetLikedRecordResponse) SetHasMore(val bool) {
	p.HasMore = val
}

var fieldIDToName_GetLikedRecordResponse = map[int16]string{
	1: "likes",
	2: "has_more",
}

func (p *GetLikedRecordResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLikedRecordResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLikedRecordResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Likes = make([]*LikeItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLikeItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Likes = append(p.Likes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetLikedRecordResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.HasMore = v
	}
	return nil
}

func (p *GetLikedRecordResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedRecordResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLikedRecordResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("likes", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Likes)); err != nil {
		return err
	}
	for _, v := range p.Likes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLikedRecordResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HasMore); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetLikedRecordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikedRecordResponse(%+v)", *p)
}

func (p *GetLikedRecordResponse) DeepEqual(ano *GetLikedRecordResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Likes) {
		return false
	}
	if !p.Field2DeepEqual(ano.HasMore) {
		return false
	}
	return true
}

func (p *GetLikedRecordResponse) Field1DeepEqual(src []*LikeItem) bool {

	if len(p.Likes) != len(src) {
		return false
	}
	for i, v := range p.Likes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetLikedRecordResponse) Field2DeepEqual(src bool) bool {

	if p.HasMore != src {
		return false
	}
	return true
}

type MGetLikedStateRequest struct {
	Obj map[int32][]int64 `thrift:"obj,1" frugal:"1,default,map<i32:list<i64>>" json:"obj"`
	Uid int64             `thrift:"uid,2" frugal:"2,default,i64" json:"uid"`
}

func NewMGetLikedStateRequest() *MGetLikedStateRequest {
	return &MGetLikedStateRequest{}
}

func (p *MGetLikedStateRequest) InitDefault() {
	*p = MGetLikedStateRequest{}
}

func (p *MGetLikedStateRequest) GetObj() (v map[int32][]int64) {
	return p.Obj
}

func (p *MGetLikedStateRequest) GetUid() (v int64) {
	return p.Uid
}
func (p *MGetLikedStateRequest) SetObj(val map[int32][]int64) {
	p.Obj = val
}
func (p *MGetLikedStateRequest) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_MGetLikedStateRequest = map[int16]string{
	1: "obj",
	2: "uid",
}

func (p *MGetLikedStateRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MGetLikedStateRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MGetLikedStateRequest) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Obj = make(map[int32][]int64, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]int64, 0, size)
		for i := 0; i < size; i++ {
			var _elem int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Obj[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MGetLikedStateRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *MGetLikedStateRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedStateRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MGetLikedStateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Obj)); err != nil {
		return err
	}
	for k, v := range p.Obj {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MGetLikedStateRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MGetLikedStateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetLikedStateRequest(%+v)", *p)
}

func (p *MGetLikedStateRequest) DeepEqual(ano *MGetLikedStateRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Obj) {
		return false
	}
	if !p.Field2DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *MGetLikedStateRequest) Field1DeepEqual(src map[int32][]int64) bool {

	if len(p.Obj) != len(src) {
		return false
	}
	for k, v := range p.Obj {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}
func (p *MGetLikedStateRequest) Field2DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type MGetLikedStateResponse struct {
	M map[int32]map[int64]bool `thrift:"m,1" frugal:"1,default,map<i32:map<i64:bool>>" json:"m"`
}

func NewMGetLikedStateResponse() *MGetLikedStateResponse {
	return &MGetLikedStateResponse{}
}

func (p *MGetLikedStateResponse) InitDefault() {
	*p = MGetLikedStateResponse{}
}

func (p *MGetLikedStateResponse) GetM() (v map[int32]map[int64]bool) {
	return p.M
}
func (p *MGetLikedStateResponse) SetM(val map[int32]map[int64]bool) {
	p.M = val
}

var fieldIDToName_MGetLikedStateResponse = map[int16]string{
	1: "m",
}

func (p *MGetLikedStateResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MGetLikedStateResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MGetLikedStateResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.M = make(map[int32]map[int64]bool, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[int64]bool, size)
		for i := 0; i < size; i++ {
			var _key1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_key1 = v
			}

			var _val1 bool
			if v, err := iprot.ReadBool(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.M[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MGetLikedStateResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedStateResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MGetLikedStateResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("m", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.M)); err != nil {
		return err
	}
	for k, v := range p.M {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteMapBegin(thrift.I64, thrift.BOOL, len(v)); err != nil {
			return err
		}
		for k, v := range v {

			if err := oprot.WriteI64(k); err != nil {
				return err
			}

			if err := oprot.WriteBool(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MGetLikedStateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetLikedStateResponse(%+v)", *p)
}

func (p *MGetLikedStateResponse) DeepEqual(ano *MGetLikedStateResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.M) {
		return false
	}
	return true
}

func (p *MGetLikedStateResponse) Field1DeepEqual(src map[int32]map[int64]bool) bool {

	if len(p.M) != len(src) {
		return false
	}
	for k, v := range p.M {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}

type MGetLikedCountRequest struct {
	Obj map[int32][]int64 `thrift:"obj,1" frugal:"1,default,map<i32:list<i64>>" json:"obj"`
}

func NewMGetLikedCountRequest() *MGetLikedCountRequest {
	return &MGetLikedCountRequest{}
}

func (p *MGetLikedCountRequest) InitDefault() {
	*p = MGetLikedCountRequest{}
}

func (p *MGetLikedCountRequest) GetObj() (v map[int32][]int64) {
	return p.Obj
}
func (p *MGetLikedCountRequest) SetObj(val map[int32][]int64) {
	p.Obj = val
}

var fieldIDToName_MGetLikedCountRequest = map[int16]string{
	1: "obj",
}

func (p *MGetLikedCountRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MGetLikedCountRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MGetLikedCountRequest) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Obj = make(map[int32][]int64, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]int64, 0, size)
		for i := 0; i < size; i++ {
			var _elem int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Obj[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MGetLikedCountRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedCountRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MGetLikedCountRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("obj", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Obj)); err != nil {
		return err
	}
	for k, v := range p.Obj {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MGetLikedCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetLikedCountRequest(%+v)", *p)
}

func (p *MGetLikedCountRequest) DeepEqual(ano *MGetLikedCountRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Obj) {
		return false
	}
	return true
}

func (p *MGetLikedCountRequest) Field1DeepEqual(src map[int32][]int64) bool {

	if len(p.Obj) != len(src) {
		return false
	}
	for k, v := range p.Obj {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}

type MGetLikedCountResponse struct {
	M map[int32]map[int64]int32 `thrift:"m,1" frugal:"1,default,map<i32:map<i64:i32>>" json:"m"`
}

func NewMGetLikedCountResponse() *MGetLikedCountResponse {
	return &MGetLikedCountResponse{}
}

func (p *MGetLikedCountResponse) InitDefault() {
	*p = MGetLikedCountResponse{}
}

func (p *MGetLikedCountResponse) GetM() (v map[int32]map[int64]int32) {
	return p.M
}
func (p *MGetLikedCountResponse) SetM(val map[int32]map[int64]int32) {
	p.M = val
}

var fieldIDToName_MGetLikedCountResponse = map[int16]string{
	1: "m",
}

func (p *MGetLikedCountResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MGetLikedCountResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MGetLikedCountResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.M = make(map[int32]map[int64]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[int64]int32, size)
		for i := 0; i < size; i++ {
			var _key1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_key1 = v
			}

			var _val1 int32
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.M[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MGetLikedCountResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedCountResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MGetLikedCountResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("m", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.M)); err != nil {
		return err
	}
	for k, v := range p.M {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteMapBegin(thrift.I64, thrift.I32, len(v)); err != nil {
			return err
		}
		for k, v := range v {

			if err := oprot.WriteI64(k); err != nil {
				return err
			}

			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MGetLikedCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetLikedCountResponse(%+v)", *p)
}

func (p *MGetLikedCountResponse) DeepEqual(ano *MGetLikedCountResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.M) {
		return false
	}
	return true
}

func (p *MGetLikedCountResponse) Field1DeepEqual(src map[int32]map[int64]int32) bool {

	if len(p.M) != len(src) {
		return false
	}
	for k, v := range p.M {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}

type UpdateLikesCountRequest struct {
	M map[int32]map[int64]int32 `thrift:"m,1" frugal:"1,default,map<i32:map<i64:i32>>" json:"m"`
}

func NewUpdateLikesCountRequest() *UpdateLikesCountRequest {
	return &UpdateLikesCountRequest{}
}

func (p *UpdateLikesCountRequest) InitDefault() {
	*p = UpdateLikesCountRequest{}
}

func (p *UpdateLikesCountRequest) GetM() (v map[int32]map[int64]int32) {
	return p.M
}
func (p *UpdateLikesCountRequest) SetM(val map[int32]map[int64]int32) {
	p.M = val
}

var fieldIDToName_UpdateLikesCountRequest = map[int16]string{
	1: "m",
}

func (p *UpdateLikesCountRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateLikesCountRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateLikesCountRequest) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.M = make(map[int32]map[int64]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[int64]int32, size)
		for i := 0; i < size; i++ {
			var _key1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_key1 = v
			}

			var _val1 int32
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.M[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UpdateLikesCountRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateLikesCountRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateLikesCountRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("m", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.M)); err != nil {
		return err
	}
	for k, v := range p.M {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteMapBegin(thrift.I64, thrift.I32, len(v)); err != nil {
			return err
		}
		for k, v := range v {

			if err := oprot.WriteI64(k); err != nil {
				return err
			}

			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateLikesCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateLikesCountRequest(%+v)", *p)
}

func (p *UpdateLikesCountRequest) DeepEqual(ano *UpdateLikesCountRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.M) {
		return false
	}
	return true
}

func (p *UpdateLikesCountRequest) Field1DeepEqual(src map[int32]map[int64]int32) bool {

	if len(p.M) != len(src) {
		return false
	}
	for k, v := range p.M {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}

type LikeService interface {
	Like(ctx context.Context, req *LikeRequest) (r *EmptyResponse, err error)

	Unlike(ctx context.Context, req *LikeRequest) (r *EmptyResponse, err error)

	GetLikedUsers(ctx context.Context, req *GetLikedUsersRequest) (r *GetLikedUsersReponse, err error)

	GetRcvLikedList(ctx context.Context, req *GetLikedRecordRequest) (r *GetLikedRecordResponse, err error)

	GetPubLikedList(ctx context.Context, req *GetLikedRecordRequest) (r *GetLikedRecordResponse, err error)

	MGetLikedState(ctx context.Context, req *MGetLikedStateRequest) (r *MGetLikedStateResponse, err error)

	MGetLikedCount(ctx context.Context, req *MGetLikedCountRequest) (r *MGetLikedCountResponse, err error)

	MUpdateLikesCount(ctx context.Context, req *UpdateLikesCountRequest) (r *EmptyResponse, err error)
}

type LikeServiceClient struct {
	c thrift.TClient
}

func NewLikeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LikeServiceClient {
	return &LikeServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewLikeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LikeServiceClient {
	return &LikeServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewLikeServiceClient(c thrift.TClient) *LikeServiceClient {
	return &LikeServiceClient{
		c: c,
	}
}

func (p *LikeServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *LikeServiceClient) Like(ctx context.Context, req *LikeRequest) (r *EmptyResponse, err error) {
	var _args LikeServiceLikeArgs
	_args.Req = req
	var _result LikeServiceLikeResult
	if err = p.Client_().Call(ctx, "Like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeServiceClient) Unlike(ctx context.Context, req *LikeRequest) (r *EmptyResponse, err error) {
	var _args LikeServiceUnlikeArgs
	_args.Req = req
	var _result LikeServiceUnlikeResult
	if err = p.Client_().Call(ctx, "Unlike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeServiceClient) GetLikedUsers(ctx context.Context, req *GetLikedUsersRequest) (r *GetLikedUsersReponse, err error) {
	var _args LikeServiceGetLikedUsersArgs
	_args.Req = req
	var _result LikeServiceGetLikedUsersResult
	if err = p.Client_().Call(ctx, "GetLikedUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeServiceClient) GetRcvLikedList(ctx context.Context, req *GetLikedRecordRequest) (r *GetLikedRecordResponse, err error) {
	var _args LikeServiceGetRcvLikedListArgs
	_args.Req = req
	var _result LikeServiceGetRcvLikedListResult
	if err = p.Client_().Call(ctx, "GetRcvLikedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeServiceClient) GetPubLikedList(ctx context.Context, req *GetLikedRecordRequest) (r *GetLikedRecordResponse, err error) {
	var _args LikeServiceGetPubLikedListArgs
	_args.Req = req
	var _result LikeServiceGetPubLikedListResult
	if err = p.Client_().Call(ctx, "GetPubLikedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeServiceClient) MGetLikedState(ctx context.Context, req *MGetLikedStateRequest) (r *MGetLikedStateResponse, err error) {
	var _args LikeServiceMGetLikedStateArgs
	_args.Req = req
	var _result LikeServiceMGetLikedStateResult
	if err = p.Client_().Call(ctx, "MGetLikedState", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeServiceClient) MGetLikedCount(ctx context.Context, req *MGetLikedCountRequest) (r *MGetLikedCountResponse, err error) {
	var _args LikeServiceMGetLikedCountArgs
	_args.Req = req
	var _result LikeServiceMGetLikedCountResult
	if err = p.Client_().Call(ctx, "MGetLikedCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LikeServiceClient) MUpdateLikesCount(ctx context.Context, req *UpdateLikesCountRequest) (r *EmptyResponse, err error) {
	var _args LikeServiceMUpdateLikesCountArgs
	_args.Req = req
	var _result LikeServiceMUpdateLikesCountResult
	if err = p.Client_().Call(ctx, "MUpdateLikesCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type LikeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      LikeService
}

func (p *LikeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LikeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LikeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLikeServiceProcessor(handler LikeService) *LikeServiceProcessor {
	self := &LikeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Like", &likeServiceProcessorLike{handler: handler})
	self.AddToProcessorMap("Unlike", &likeServiceProcessorUnlike{handler: handler})
	self.AddToProcessorMap("GetLikedUsers", &likeServiceProcessorGetLikedUsers{handler: handler})
	self.AddToProcessorMap("GetRcvLikedList", &likeServiceProcessorGetRcvLikedList{handler: handler})
	self.AddToProcessorMap("GetPubLikedList", &likeServiceProcessorGetPubLikedList{handler: handler})
	self.AddToProcessorMap("MGetLikedState", &likeServiceProcessorMGetLikedState{handler: handler})
	self.AddToProcessorMap("MGetLikedCount", &likeServiceProcessorMGetLikedCount{handler: handler})
	self.AddToProcessorMap("MUpdateLikesCount", &likeServiceProcessorMUpdateLikesCount{handler: handler})
	return self
}
func (p *LikeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type likeServiceProcessorLike struct {
	handler LikeService
}

func (p *likeServiceProcessorLike) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeServiceLikeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Like", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeServiceLikeResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.Like(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Like: "+err2.Error())
		oprot.WriteMessageBegin("Like", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Like", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeServiceProcessorUnlike struct {
	handler LikeService
}

func (p *likeServiceProcessorUnlike) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeServiceUnlikeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Unlike", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeServiceUnlikeResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.Unlike(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Unlike: "+err2.Error())
		oprot.WriteMessageBegin("Unlike", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Unlike", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeServiceProcessorGetLikedUsers struct {
	handler LikeService
}

func (p *likeServiceProcessorGetLikedUsers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeServiceGetLikedUsersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLikedUsers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeServiceGetLikedUsersResult{}
	var retval *GetLikedUsersReponse
	if retval, err2 = p.handler.GetLikedUsers(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLikedUsers: "+err2.Error())
		oprot.WriteMessageBegin("GetLikedUsers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLikedUsers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeServiceProcessorGetRcvLikedList struct {
	handler LikeService
}

func (p *likeServiceProcessorGetRcvLikedList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeServiceGetRcvLikedListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetRcvLikedList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeServiceGetRcvLikedListResult{}
	var retval *GetLikedRecordResponse
	if retval, err2 = p.handler.GetRcvLikedList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRcvLikedList: "+err2.Error())
		oprot.WriteMessageBegin("GetRcvLikedList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetRcvLikedList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeServiceProcessorGetPubLikedList struct {
	handler LikeService
}

func (p *likeServiceProcessorGetPubLikedList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeServiceGetPubLikedListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPubLikedList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeServiceGetPubLikedListResult{}
	var retval *GetLikedRecordResponse
	if retval, err2 = p.handler.GetPubLikedList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPubLikedList: "+err2.Error())
		oprot.WriteMessageBegin("GetPubLikedList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPubLikedList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeServiceProcessorMGetLikedState struct {
	handler LikeService
}

func (p *likeServiceProcessorMGetLikedState) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeServiceMGetLikedStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MGetLikedState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeServiceMGetLikedStateResult{}
	var retval *MGetLikedStateResponse
	if retval, err2 = p.handler.MGetLikedState(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MGetLikedState: "+err2.Error())
		oprot.WriteMessageBegin("MGetLikedState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MGetLikedState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeServiceProcessorMGetLikedCount struct {
	handler LikeService
}

func (p *likeServiceProcessorMGetLikedCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeServiceMGetLikedCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MGetLikedCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeServiceMGetLikedCountResult{}
	var retval *MGetLikedCountResponse
	if retval, err2 = p.handler.MGetLikedCount(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MGetLikedCount: "+err2.Error())
		oprot.WriteMessageBegin("MGetLikedCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MGetLikedCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type likeServiceProcessorMUpdateLikesCount struct {
	handler LikeService
}

func (p *likeServiceProcessorMUpdateLikesCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LikeServiceMUpdateLikesCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MUpdateLikesCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LikeServiceMUpdateLikesCountResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.MUpdateLikesCount(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MUpdateLikesCount: "+err2.Error())
		oprot.WriteMessageBegin("MUpdateLikesCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MUpdateLikesCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type LikeServiceLikeArgs struct {
	Req *LikeRequest `thrift:"req,1" frugal:"1,default,LikeRequest" json:"req"`
}

func NewLikeServiceLikeArgs() *LikeServiceLikeArgs {
	return &LikeServiceLikeArgs{}
}

func (p *LikeServiceLikeArgs) InitDefault() {
	*p = LikeServiceLikeArgs{}
}

var LikeServiceLikeArgs_Req_DEFAULT *LikeRequest

func (p *LikeServiceLikeArgs) GetReq() (v *LikeRequest) {
	if !p.IsSetReq() {
		return LikeServiceLikeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeServiceLikeArgs) SetReq(val *LikeRequest) {
	p.Req = val
}

var fieldIDToName_LikeServiceLikeArgs = map[int16]string{
	1: "req",
}

func (p *LikeServiceLikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeServiceLikeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceLikeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceLikeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewLikeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceLikeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Like_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceLikeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeServiceLikeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceLikeArgs(%+v)", *p)
}

func (p *LikeServiceLikeArgs) DeepEqual(ano *LikeServiceLikeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeServiceLikeArgs) Field1DeepEqual(src *LikeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceLikeResult struct {
	Success *EmptyResponse `thrift:"success,0,optional" frugal:"0,optional,EmptyResponse" json:"success,omitempty"`
}

func NewLikeServiceLikeResult() *LikeServiceLikeResult {
	return &LikeServiceLikeResult{}
}

func (p *LikeServiceLikeResult) InitDefault() {
	*p = LikeServiceLikeResult{}
}

var LikeServiceLikeResult_Success_DEFAULT *EmptyResponse

func (p *LikeServiceLikeResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return LikeServiceLikeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeServiceLikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}

var fieldIDToName_LikeServiceLikeResult = map[int16]string{
	0: "success",
}

func (p *LikeServiceLikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeServiceLikeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceLikeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceLikeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceLikeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Like_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceLikeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeServiceLikeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceLikeResult(%+v)", *p)
}

func (p *LikeServiceLikeResult) DeepEqual(ano *LikeServiceLikeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeServiceLikeResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceUnlikeArgs struct {
	Req *LikeRequest `thrift:"req,1" frugal:"1,default,LikeRequest" json:"req"`
}

func NewLikeServiceUnlikeArgs() *LikeServiceUnlikeArgs {
	return &LikeServiceUnlikeArgs{}
}

func (p *LikeServiceUnlikeArgs) InitDefault() {
	*p = LikeServiceUnlikeArgs{}
}

var LikeServiceUnlikeArgs_Req_DEFAULT *LikeRequest

func (p *LikeServiceUnlikeArgs) GetReq() (v *LikeRequest) {
	if !p.IsSetReq() {
		return LikeServiceUnlikeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeServiceUnlikeArgs) SetReq(val *LikeRequest) {
	p.Req = val
}

var fieldIDToName_LikeServiceUnlikeArgs = map[int16]string{
	1: "req",
}

func (p *LikeServiceUnlikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeServiceUnlikeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceUnlikeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceUnlikeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewLikeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceUnlikeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Unlike_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceUnlikeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeServiceUnlikeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceUnlikeArgs(%+v)", *p)
}

func (p *LikeServiceUnlikeArgs) DeepEqual(ano *LikeServiceUnlikeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeServiceUnlikeArgs) Field1DeepEqual(src *LikeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceUnlikeResult struct {
	Success *EmptyResponse `thrift:"success,0,optional" frugal:"0,optional,EmptyResponse" json:"success,omitempty"`
}

func NewLikeServiceUnlikeResult() *LikeServiceUnlikeResult {
	return &LikeServiceUnlikeResult{}
}

func (p *LikeServiceUnlikeResult) InitDefault() {
	*p = LikeServiceUnlikeResult{}
}

var LikeServiceUnlikeResult_Success_DEFAULT *EmptyResponse

func (p *LikeServiceUnlikeResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return LikeServiceUnlikeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeServiceUnlikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}

var fieldIDToName_LikeServiceUnlikeResult = map[int16]string{
	0: "success",
}

func (p *LikeServiceUnlikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeServiceUnlikeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceUnlikeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceUnlikeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceUnlikeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Unlike_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceUnlikeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeServiceUnlikeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceUnlikeResult(%+v)", *p)
}

func (p *LikeServiceUnlikeResult) DeepEqual(ano *LikeServiceUnlikeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeServiceUnlikeResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceGetLikedUsersArgs struct {
	Req *GetLikedUsersRequest `thrift:"req,1" frugal:"1,default,GetLikedUsersRequest" json:"req"`
}

func NewLikeServiceGetLikedUsersArgs() *LikeServiceGetLikedUsersArgs {
	return &LikeServiceGetLikedUsersArgs{}
}

func (p *LikeServiceGetLikedUsersArgs) InitDefault() {
	*p = LikeServiceGetLikedUsersArgs{}
}

var LikeServiceGetLikedUsersArgs_Req_DEFAULT *GetLikedUsersRequest

func (p *LikeServiceGetLikedUsersArgs) GetReq() (v *GetLikedUsersRequest) {
	if !p.IsSetReq() {
		return LikeServiceGetLikedUsersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeServiceGetLikedUsersArgs) SetReq(val *GetLikedUsersRequest) {
	p.Req = val
}

var fieldIDToName_LikeServiceGetLikedUsersArgs = map[int16]string{
	1: "req",
}

func (p *LikeServiceGetLikedUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeServiceGetLikedUsersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceGetLikedUsersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceGetLikedUsersArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetLikedUsersRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceGetLikedUsersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedUsers_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceGetLikedUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeServiceGetLikedUsersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceGetLikedUsersArgs(%+v)", *p)
}

func (p *LikeServiceGetLikedUsersArgs) DeepEqual(ano *LikeServiceGetLikedUsersArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeServiceGetLikedUsersArgs) Field1DeepEqual(src *GetLikedUsersRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceGetLikedUsersResult struct {
	Success *GetLikedUsersReponse `thrift:"success,0,optional" frugal:"0,optional,GetLikedUsersReponse" json:"success,omitempty"`
}

func NewLikeServiceGetLikedUsersResult() *LikeServiceGetLikedUsersResult {
	return &LikeServiceGetLikedUsersResult{}
}

func (p *LikeServiceGetLikedUsersResult) InitDefault() {
	*p = LikeServiceGetLikedUsersResult{}
}

var LikeServiceGetLikedUsersResult_Success_DEFAULT *GetLikedUsersReponse

func (p *LikeServiceGetLikedUsersResult) GetSuccess() (v *GetLikedUsersReponse) {
	if !p.IsSetSuccess() {
		return LikeServiceGetLikedUsersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeServiceGetLikedUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLikedUsersReponse)
}

var fieldIDToName_LikeServiceGetLikedUsersResult = map[int16]string{
	0: "success",
}

func (p *LikeServiceGetLikedUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeServiceGetLikedUsersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceGetLikedUsersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceGetLikedUsersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetLikedUsersReponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceGetLikedUsersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLikedUsers_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceGetLikedUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeServiceGetLikedUsersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceGetLikedUsersResult(%+v)", *p)
}

func (p *LikeServiceGetLikedUsersResult) DeepEqual(ano *LikeServiceGetLikedUsersResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeServiceGetLikedUsersResult) Field0DeepEqual(src *GetLikedUsersReponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceGetRcvLikedListArgs struct {
	Req *GetLikedRecordRequest `thrift:"req,1" frugal:"1,default,GetLikedRecordRequest" json:"req"`
}

func NewLikeServiceGetRcvLikedListArgs() *LikeServiceGetRcvLikedListArgs {
	return &LikeServiceGetRcvLikedListArgs{}
}

func (p *LikeServiceGetRcvLikedListArgs) InitDefault() {
	*p = LikeServiceGetRcvLikedListArgs{}
}

var LikeServiceGetRcvLikedListArgs_Req_DEFAULT *GetLikedRecordRequest

func (p *LikeServiceGetRcvLikedListArgs) GetReq() (v *GetLikedRecordRequest) {
	if !p.IsSetReq() {
		return LikeServiceGetRcvLikedListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeServiceGetRcvLikedListArgs) SetReq(val *GetLikedRecordRequest) {
	p.Req = val
}

var fieldIDToName_LikeServiceGetRcvLikedListArgs = map[int16]string{
	1: "req",
}

func (p *LikeServiceGetRcvLikedListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeServiceGetRcvLikedListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceGetRcvLikedListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceGetRcvLikedListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetLikedRecordRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceGetRcvLikedListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRcvLikedList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceGetRcvLikedListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeServiceGetRcvLikedListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceGetRcvLikedListArgs(%+v)", *p)
}

func (p *LikeServiceGetRcvLikedListArgs) DeepEqual(ano *LikeServiceGetRcvLikedListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeServiceGetRcvLikedListArgs) Field1DeepEqual(src *GetLikedRecordRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceGetRcvLikedListResult struct {
	Success *GetLikedRecordResponse `thrift:"success,0,optional" frugal:"0,optional,GetLikedRecordResponse" json:"success,omitempty"`
}

func NewLikeServiceGetRcvLikedListResult() *LikeServiceGetRcvLikedListResult {
	return &LikeServiceGetRcvLikedListResult{}
}

func (p *LikeServiceGetRcvLikedListResult) InitDefault() {
	*p = LikeServiceGetRcvLikedListResult{}
}

var LikeServiceGetRcvLikedListResult_Success_DEFAULT *GetLikedRecordResponse

func (p *LikeServiceGetRcvLikedListResult) GetSuccess() (v *GetLikedRecordResponse) {
	if !p.IsSetSuccess() {
		return LikeServiceGetRcvLikedListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeServiceGetRcvLikedListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLikedRecordResponse)
}

var fieldIDToName_LikeServiceGetRcvLikedListResult = map[int16]string{
	0: "success",
}

func (p *LikeServiceGetRcvLikedListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeServiceGetRcvLikedListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceGetRcvLikedListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceGetRcvLikedListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetLikedRecordResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceGetRcvLikedListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRcvLikedList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceGetRcvLikedListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeServiceGetRcvLikedListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceGetRcvLikedListResult(%+v)", *p)
}

func (p *LikeServiceGetRcvLikedListResult) DeepEqual(ano *LikeServiceGetRcvLikedListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeServiceGetRcvLikedListResult) Field0DeepEqual(src *GetLikedRecordResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceGetPubLikedListArgs struct {
	Req *GetLikedRecordRequest `thrift:"req,1" frugal:"1,default,GetLikedRecordRequest" json:"req"`
}

func NewLikeServiceGetPubLikedListArgs() *LikeServiceGetPubLikedListArgs {
	return &LikeServiceGetPubLikedListArgs{}
}

func (p *LikeServiceGetPubLikedListArgs) InitDefault() {
	*p = LikeServiceGetPubLikedListArgs{}
}

var LikeServiceGetPubLikedListArgs_Req_DEFAULT *GetLikedRecordRequest

func (p *LikeServiceGetPubLikedListArgs) GetReq() (v *GetLikedRecordRequest) {
	if !p.IsSetReq() {
		return LikeServiceGetPubLikedListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeServiceGetPubLikedListArgs) SetReq(val *GetLikedRecordRequest) {
	p.Req = val
}

var fieldIDToName_LikeServiceGetPubLikedListArgs = map[int16]string{
	1: "req",
}

func (p *LikeServiceGetPubLikedListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeServiceGetPubLikedListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceGetPubLikedListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceGetPubLikedListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetLikedRecordRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceGetPubLikedListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPubLikedList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceGetPubLikedListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeServiceGetPubLikedListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceGetPubLikedListArgs(%+v)", *p)
}

func (p *LikeServiceGetPubLikedListArgs) DeepEqual(ano *LikeServiceGetPubLikedListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeServiceGetPubLikedListArgs) Field1DeepEqual(src *GetLikedRecordRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceGetPubLikedListResult struct {
	Success *GetLikedRecordResponse `thrift:"success,0,optional" frugal:"0,optional,GetLikedRecordResponse" json:"success,omitempty"`
}

func NewLikeServiceGetPubLikedListResult() *LikeServiceGetPubLikedListResult {
	return &LikeServiceGetPubLikedListResult{}
}

func (p *LikeServiceGetPubLikedListResult) InitDefault() {
	*p = LikeServiceGetPubLikedListResult{}
}

var LikeServiceGetPubLikedListResult_Success_DEFAULT *GetLikedRecordResponse

func (p *LikeServiceGetPubLikedListResult) GetSuccess() (v *GetLikedRecordResponse) {
	if !p.IsSetSuccess() {
		return LikeServiceGetPubLikedListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeServiceGetPubLikedListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLikedRecordResponse)
}

var fieldIDToName_LikeServiceGetPubLikedListResult = map[int16]string{
	0: "success",
}

func (p *LikeServiceGetPubLikedListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeServiceGetPubLikedListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceGetPubLikedListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceGetPubLikedListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetLikedRecordResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceGetPubLikedListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPubLikedList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceGetPubLikedListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeServiceGetPubLikedListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceGetPubLikedListResult(%+v)", *p)
}

func (p *LikeServiceGetPubLikedListResult) DeepEqual(ano *LikeServiceGetPubLikedListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeServiceGetPubLikedListResult) Field0DeepEqual(src *GetLikedRecordResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceMGetLikedStateArgs struct {
	Req *MGetLikedStateRequest `thrift:"req,1" frugal:"1,default,MGetLikedStateRequest" json:"req"`
}

func NewLikeServiceMGetLikedStateArgs() *LikeServiceMGetLikedStateArgs {
	return &LikeServiceMGetLikedStateArgs{}
}

func (p *LikeServiceMGetLikedStateArgs) InitDefault() {
	*p = LikeServiceMGetLikedStateArgs{}
}

var LikeServiceMGetLikedStateArgs_Req_DEFAULT *MGetLikedStateRequest

func (p *LikeServiceMGetLikedStateArgs) GetReq() (v *MGetLikedStateRequest) {
	if !p.IsSetReq() {
		return LikeServiceMGetLikedStateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeServiceMGetLikedStateArgs) SetReq(val *MGetLikedStateRequest) {
	p.Req = val
}

var fieldIDToName_LikeServiceMGetLikedStateArgs = map[int16]string{
	1: "req",
}

func (p *LikeServiceMGetLikedStateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeServiceMGetLikedStateArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceMGetLikedStateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceMGetLikedStateArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMGetLikedStateRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceMGetLikedStateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedState_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceMGetLikedStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeServiceMGetLikedStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceMGetLikedStateArgs(%+v)", *p)
}

func (p *LikeServiceMGetLikedStateArgs) DeepEqual(ano *LikeServiceMGetLikedStateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeServiceMGetLikedStateArgs) Field1DeepEqual(src *MGetLikedStateRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceMGetLikedStateResult struct {
	Success *MGetLikedStateResponse `thrift:"success,0,optional" frugal:"0,optional,MGetLikedStateResponse" json:"success,omitempty"`
}

func NewLikeServiceMGetLikedStateResult() *LikeServiceMGetLikedStateResult {
	return &LikeServiceMGetLikedStateResult{}
}

func (p *LikeServiceMGetLikedStateResult) InitDefault() {
	*p = LikeServiceMGetLikedStateResult{}
}

var LikeServiceMGetLikedStateResult_Success_DEFAULT *MGetLikedStateResponse

func (p *LikeServiceMGetLikedStateResult) GetSuccess() (v *MGetLikedStateResponse) {
	if !p.IsSetSuccess() {
		return LikeServiceMGetLikedStateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeServiceMGetLikedStateResult) SetSuccess(x interface{}) {
	p.Success = x.(*MGetLikedStateResponse)
}

var fieldIDToName_LikeServiceMGetLikedStateResult = map[int16]string{
	0: "success",
}

func (p *LikeServiceMGetLikedStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeServiceMGetLikedStateResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceMGetLikedStateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceMGetLikedStateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMGetLikedStateResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceMGetLikedStateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedState_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceMGetLikedStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeServiceMGetLikedStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceMGetLikedStateResult(%+v)", *p)
}

func (p *LikeServiceMGetLikedStateResult) DeepEqual(ano *LikeServiceMGetLikedStateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeServiceMGetLikedStateResult) Field0DeepEqual(src *MGetLikedStateResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceMGetLikedCountArgs struct {
	Req *MGetLikedCountRequest `thrift:"req,1" frugal:"1,default,MGetLikedCountRequest" json:"req"`
}

func NewLikeServiceMGetLikedCountArgs() *LikeServiceMGetLikedCountArgs {
	return &LikeServiceMGetLikedCountArgs{}
}

func (p *LikeServiceMGetLikedCountArgs) InitDefault() {
	*p = LikeServiceMGetLikedCountArgs{}
}

var LikeServiceMGetLikedCountArgs_Req_DEFAULT *MGetLikedCountRequest

func (p *LikeServiceMGetLikedCountArgs) GetReq() (v *MGetLikedCountRequest) {
	if !p.IsSetReq() {
		return LikeServiceMGetLikedCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeServiceMGetLikedCountArgs) SetReq(val *MGetLikedCountRequest) {
	p.Req = val
}

var fieldIDToName_LikeServiceMGetLikedCountArgs = map[int16]string{
	1: "req",
}

func (p *LikeServiceMGetLikedCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeServiceMGetLikedCountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceMGetLikedCountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceMGetLikedCountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMGetLikedCountRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceMGetLikedCountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedCount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceMGetLikedCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeServiceMGetLikedCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceMGetLikedCountArgs(%+v)", *p)
}

func (p *LikeServiceMGetLikedCountArgs) DeepEqual(ano *LikeServiceMGetLikedCountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeServiceMGetLikedCountArgs) Field1DeepEqual(src *MGetLikedCountRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceMGetLikedCountResult struct {
	Success *MGetLikedCountResponse `thrift:"success,0,optional" frugal:"0,optional,MGetLikedCountResponse" json:"success,omitempty"`
}

func NewLikeServiceMGetLikedCountResult() *LikeServiceMGetLikedCountResult {
	return &LikeServiceMGetLikedCountResult{}
}

func (p *LikeServiceMGetLikedCountResult) InitDefault() {
	*p = LikeServiceMGetLikedCountResult{}
}

var LikeServiceMGetLikedCountResult_Success_DEFAULT *MGetLikedCountResponse

func (p *LikeServiceMGetLikedCountResult) GetSuccess() (v *MGetLikedCountResponse) {
	if !p.IsSetSuccess() {
		return LikeServiceMGetLikedCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeServiceMGetLikedCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*MGetLikedCountResponse)
}

var fieldIDToName_LikeServiceMGetLikedCountResult = map[int16]string{
	0: "success",
}

func (p *LikeServiceMGetLikedCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeServiceMGetLikedCountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceMGetLikedCountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceMGetLikedCountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMGetLikedCountResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceMGetLikedCountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MGetLikedCount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceMGetLikedCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeServiceMGetLikedCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceMGetLikedCountResult(%+v)", *p)
}

func (p *LikeServiceMGetLikedCountResult) DeepEqual(ano *LikeServiceMGetLikedCountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeServiceMGetLikedCountResult) Field0DeepEqual(src *MGetLikedCountResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceMUpdateLikesCountArgs struct {
	Req *UpdateLikesCountRequest `thrift:"req,1" frugal:"1,default,UpdateLikesCountRequest" json:"req"`
}

func NewLikeServiceMUpdateLikesCountArgs() *LikeServiceMUpdateLikesCountArgs {
	return &LikeServiceMUpdateLikesCountArgs{}
}

func (p *LikeServiceMUpdateLikesCountArgs) InitDefault() {
	*p = LikeServiceMUpdateLikesCountArgs{}
}

var LikeServiceMUpdateLikesCountArgs_Req_DEFAULT *UpdateLikesCountRequest

func (p *LikeServiceMUpdateLikesCountArgs) GetReq() (v *UpdateLikesCountRequest) {
	if !p.IsSetReq() {
		return LikeServiceMUpdateLikesCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LikeServiceMUpdateLikesCountArgs) SetReq(val *UpdateLikesCountRequest) {
	p.Req = val
}

var fieldIDToName_LikeServiceMUpdateLikesCountArgs = map[int16]string{
	1: "req",
}

func (p *LikeServiceMUpdateLikesCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeServiceMUpdateLikesCountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceMUpdateLikesCountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceMUpdateLikesCountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUpdateLikesCountRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceMUpdateLikesCountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MUpdateLikesCount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceMUpdateLikesCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LikeServiceMUpdateLikesCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceMUpdateLikesCountArgs(%+v)", *p)
}

func (p *LikeServiceMUpdateLikesCountArgs) DeepEqual(ano *LikeServiceMUpdateLikesCountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LikeServiceMUpdateLikesCountArgs) Field1DeepEqual(src *UpdateLikesCountRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LikeServiceMUpdateLikesCountResult struct {
	Success *EmptyResponse `thrift:"success,0,optional" frugal:"0,optional,EmptyResponse" json:"success,omitempty"`
}

func NewLikeServiceMUpdateLikesCountResult() *LikeServiceMUpdateLikesCountResult {
	return &LikeServiceMUpdateLikesCountResult{}
}

func (p *LikeServiceMUpdateLikesCountResult) InitDefault() {
	*p = LikeServiceMUpdateLikesCountResult{}
}

var LikeServiceMUpdateLikesCountResult_Success_DEFAULT *EmptyResponse

func (p *LikeServiceMUpdateLikesCountResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return LikeServiceMUpdateLikesCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LikeServiceMUpdateLikesCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}

var fieldIDToName_LikeServiceMUpdateLikesCountResult = map[int16]string{
	0: "success",
}

func (p *LikeServiceMUpdateLikesCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeServiceMUpdateLikesCountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LikeServiceMUpdateLikesCountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LikeServiceMUpdateLikesCountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LikeServiceMUpdateLikesCountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MUpdateLikesCount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LikeServiceMUpdateLikesCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LikeServiceMUpdateLikesCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeServiceMUpdateLikesCountResult(%+v)", *p)
}

func (p *LikeServiceMUpdateLikesCountResult) DeepEqual(ano *LikeServiceMUpdateLikesCountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LikeServiceMUpdateLikesCountResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
