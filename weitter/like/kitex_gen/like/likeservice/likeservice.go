// Code generated by Kitex v0.5.0. DO NOT EDIT.

package likeservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	like "github.com/zxq97/design/weitter/like/kitex_gen/like"
)

func serviceInfo() *kitex.ServiceInfo {
	return likeServiceServiceInfo
}

var likeServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "LikeService"
	handlerType := (*like.LikeService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Like":              kitex.NewMethodInfo(likeHandler, newLikeServiceLikeArgs, newLikeServiceLikeResult, false),
		"Unlike":            kitex.NewMethodInfo(unlikeHandler, newLikeServiceUnlikeArgs, newLikeServiceUnlikeResult, false),
		"GetLikedUsers":     kitex.NewMethodInfo(getLikedUsersHandler, newLikeServiceGetLikedUsersArgs, newLikeServiceGetLikedUsersResult, false),
		"GetRcvLikedList":   kitex.NewMethodInfo(getRcvLikedListHandler, newLikeServiceGetRcvLikedListArgs, newLikeServiceGetRcvLikedListResult, false),
		"GetPubLikedList":   kitex.NewMethodInfo(getPubLikedListHandler, newLikeServiceGetPubLikedListArgs, newLikeServiceGetPubLikedListResult, false),
		"MGetLikedState":    kitex.NewMethodInfo(mGetLikedStateHandler, newLikeServiceMGetLikedStateArgs, newLikeServiceMGetLikedStateResult, false),
		"MGetLikedCount":    kitex.NewMethodInfo(mGetLikedCountHandler, newLikeServiceMGetLikedCountArgs, newLikeServiceMGetLikedCountResult, false),
		"MUpdateLikesCount": kitex.NewMethodInfo(mUpdateLikesCountHandler, newLikeServiceMUpdateLikesCountArgs, newLikeServiceMUpdateLikesCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "like",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.0",
		Extra:           extra,
	}
	return svcInfo
}

func likeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceLikeArgs)
	realResult := result.(*like.LikeServiceLikeResult)
	success, err := handler.(like.LikeService).Like(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceLikeArgs() interface{} {
	return like.NewLikeServiceLikeArgs()
}

func newLikeServiceLikeResult() interface{} {
	return like.NewLikeServiceLikeResult()
}

func unlikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceUnlikeArgs)
	realResult := result.(*like.LikeServiceUnlikeResult)
	success, err := handler.(like.LikeService).Unlike(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceUnlikeArgs() interface{} {
	return like.NewLikeServiceUnlikeArgs()
}

func newLikeServiceUnlikeResult() interface{} {
	return like.NewLikeServiceUnlikeResult()
}

func getLikedUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceGetLikedUsersArgs)
	realResult := result.(*like.LikeServiceGetLikedUsersResult)
	success, err := handler.(like.LikeService).GetLikedUsers(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceGetLikedUsersArgs() interface{} {
	return like.NewLikeServiceGetLikedUsersArgs()
}

func newLikeServiceGetLikedUsersResult() interface{} {
	return like.NewLikeServiceGetLikedUsersResult()
}

func getRcvLikedListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceGetRcvLikedListArgs)
	realResult := result.(*like.LikeServiceGetRcvLikedListResult)
	success, err := handler.(like.LikeService).GetRcvLikedList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceGetRcvLikedListArgs() interface{} {
	return like.NewLikeServiceGetRcvLikedListArgs()
}

func newLikeServiceGetRcvLikedListResult() interface{} {
	return like.NewLikeServiceGetRcvLikedListResult()
}

func getPubLikedListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceGetPubLikedListArgs)
	realResult := result.(*like.LikeServiceGetPubLikedListResult)
	success, err := handler.(like.LikeService).GetPubLikedList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceGetPubLikedListArgs() interface{} {
	return like.NewLikeServiceGetPubLikedListArgs()
}

func newLikeServiceGetPubLikedListResult() interface{} {
	return like.NewLikeServiceGetPubLikedListResult()
}

func mGetLikedStateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceMGetLikedStateArgs)
	realResult := result.(*like.LikeServiceMGetLikedStateResult)
	success, err := handler.(like.LikeService).MGetLikedState(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceMGetLikedStateArgs() interface{} {
	return like.NewLikeServiceMGetLikedStateArgs()
}

func newLikeServiceMGetLikedStateResult() interface{} {
	return like.NewLikeServiceMGetLikedStateResult()
}

func mGetLikedCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceMGetLikedCountArgs)
	realResult := result.(*like.LikeServiceMGetLikedCountResult)
	success, err := handler.(like.LikeService).MGetLikedCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceMGetLikedCountArgs() interface{} {
	return like.NewLikeServiceMGetLikedCountArgs()
}

func newLikeServiceMGetLikedCountResult() interface{} {
	return like.NewLikeServiceMGetLikedCountResult()
}

func mUpdateLikesCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceMUpdateLikesCountArgs)
	realResult := result.(*like.LikeServiceMUpdateLikesCountResult)
	success, err := handler.(like.LikeService).MUpdateLikesCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceMUpdateLikesCountArgs() interface{} {
	return like.NewLikeServiceMUpdateLikesCountArgs()
}

func newLikeServiceMUpdateLikesCountResult() interface{} {
	return like.NewLikeServiceMUpdateLikesCountResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Like(ctx context.Context, req *like.LikeRequest) (r *like.EmptyResponse, err error) {
	var _args like.LikeServiceLikeArgs
	_args.Req = req
	var _result like.LikeServiceLikeResult
	if err = p.c.Call(ctx, "Like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Unlike(ctx context.Context, req *like.LikeRequest) (r *like.EmptyResponse, err error) {
	var _args like.LikeServiceUnlikeArgs
	_args.Req = req
	var _result like.LikeServiceUnlikeResult
	if err = p.c.Call(ctx, "Unlike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikedUsers(ctx context.Context, req *like.GetLikedUsersRequest) (r *like.GetLikedUsersReponse, err error) {
	var _args like.LikeServiceGetLikedUsersArgs
	_args.Req = req
	var _result like.LikeServiceGetLikedUsersResult
	if err = p.c.Call(ctx, "GetLikedUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRcvLikedList(ctx context.Context, req *like.GetLikedRecordRequest) (r *like.GetLikedRecordResponse, err error) {
	var _args like.LikeServiceGetRcvLikedListArgs
	_args.Req = req
	var _result like.LikeServiceGetRcvLikedListResult
	if err = p.c.Call(ctx, "GetRcvLikedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPubLikedList(ctx context.Context, req *like.GetLikedRecordRequest) (r *like.GetLikedRecordResponse, err error) {
	var _args like.LikeServiceGetPubLikedListArgs
	_args.Req = req
	var _result like.LikeServiceGetPubLikedListResult
	if err = p.c.Call(ctx, "GetPubLikedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetLikedState(ctx context.Context, req *like.MGetLikedStateRequest) (r *like.MGetLikedStateResponse, err error) {
	var _args like.LikeServiceMGetLikedStateArgs
	_args.Req = req
	var _result like.LikeServiceMGetLikedStateResult
	if err = p.c.Call(ctx, "MGetLikedState", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetLikedCount(ctx context.Context, req *like.MGetLikedCountRequest) (r *like.MGetLikedCountResponse, err error) {
	var _args like.LikeServiceMGetLikedCountArgs
	_args.Req = req
	var _result like.LikeServiceMGetLikedCountResult
	if err = p.c.Call(ctx, "MGetLikedCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MUpdateLikesCount(ctx context.Context, req *like.UpdateLikesCountRequest) (r *like.EmptyResponse, err error) {
	var _args like.LikeServiceMUpdateLikesCountArgs
	_args.Req = req
	var _result like.LikeServiceMUpdateLikesCountResult
	if err = p.c.Call(ctx, "MUpdateLikesCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
