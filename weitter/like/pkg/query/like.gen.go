// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zxq97/design/weitter/like/pkg/model"
)

func newLike(db *gorm.DB, opts ...gen.DOOption) like {
	_like := like{}

	_like.likeDo.UseDB(db, opts...)
	_like.likeDo.UseModel(&model.Like{})

	tableName := _like.likeDo.TableName()
	_like.ALL = field.NewAsterisk(tableName)
	_like.ID = field.NewInt64(tableName, "id")
	_like.ObjID = field.NewInt64(tableName, "obj_id")
	_like.ObjType = field.NewInt32(tableName, "obj_type")
	_like.UID = field.NewInt64(tableName, "uid")
	_like.Author = field.NewInt64(tableName, "author")
	_like.State = field.NewInt32(tableName, "state")
	_like.Ctime = field.NewTime(tableName, "ctime")
	_like.Mtime = field.NewTime(tableName, "mtime")

	_like.fillFieldMap()

	return _like
}

type like struct {
	likeDo likeDo

	ALL     field.Asterisk
	ID      field.Int64
	ObjID   field.Int64
	ObjType field.Int32
	UID     field.Int64
	Author  field.Int64
	State   field.Int32
	Ctime   field.Time
	Mtime   field.Time

	fieldMap map[string]field.Expr
}

func (l like) Table(newTableName string) *like {
	l.likeDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l like) As(alias string) *like {
	l.likeDo.DO = *(l.likeDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *like) updateTableName(table string) *like {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.ObjID = field.NewInt64(table, "obj_id")
	l.ObjType = field.NewInt32(table, "obj_type")
	l.UID = field.NewInt64(table, "uid")
	l.Author = field.NewInt64(table, "author")
	l.State = field.NewInt32(table, "state")
	l.Ctime = field.NewTime(table, "ctime")
	l.Mtime = field.NewTime(table, "mtime")

	l.fillFieldMap()

	return l
}

func (l *like) WithContext(ctx context.Context) *likeDo { return l.likeDo.WithContext(ctx) }

func (l like) TableName() string { return l.likeDo.TableName() }

func (l like) Alias() string { return l.likeDo.Alias() }

func (l like) Columns(cols ...field.Expr) gen.Columns { return l.likeDo.Columns(cols...) }

func (l *like) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *like) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 8)
	l.fieldMap["id"] = l.ID
	l.fieldMap["obj_id"] = l.ObjID
	l.fieldMap["obj_type"] = l.ObjType
	l.fieldMap["uid"] = l.UID
	l.fieldMap["author"] = l.Author
	l.fieldMap["state"] = l.State
	l.fieldMap["ctime"] = l.Ctime
	l.fieldMap["mtime"] = l.Mtime
}

func (l like) clone(db *gorm.DB) like {
	l.likeDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l like) replaceDB(db *gorm.DB) like {
	l.likeDo.ReplaceDB(db)
	return l
}

type likeDo struct{ gen.DO }

// sql(insert into @@table(obj_id, obj_type, uid, author, state) values (@objID, @objType, @uid, @author, 1) on deplicate key update state = 1)
func (l likeDo) InsertLike(objID int64, uid int64, author int64, objType int32) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, objID)
	params = append(params, objType)
	params = append(params, uid)
	params = append(params, author)
	generateSQL.WriteString("insert into like(obj_id, obj_type, uid, author, state) values (?, ?, ?, ?, 1) on deplicate key update state = 1 ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(select uid, ctime from @@table where obj_id=@objID and obj_type=@objType and state=1 and id < (select id from @@table where obj_id=objID and obj_type=@objType and uid=@uid limit 1) order by id desc limit @limit)
func (l likeDo) FindLikedUsers(objID int64, uid int64, objType int32, limit int8) (result []*model.Like, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, objID)
	params = append(params, objType)
	params = append(params, objType)
	params = append(params, uid)
	params = append(params, limit)
	generateSQL.WriteString("select uid, ctime from like where obj_id=? and obj_type=? and state=1 and id < (select id from like where obj_id=objID and obj_type=? and uid=? limit 1) order by id desc limit ? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(select obj_id, obj_type, uid, ctime from @@table where author=@author and obj_type=@objType and state=1 and id < (select id from @@table where (obj_id=@objID and obj_type=@objType and uid=@uid limit 1)) order by id desc limit @limit)
func (l likeDo) FindRcvLikedRecord(objID int64, uid int64, author int64, objType int32, limit int8) (result []*model.Like, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, author)
	params = append(params, objType)
	params = append(params, objID)
	params = append(params, objType)
	params = append(params, uid)
	params = append(params, limit)
	generateSQL.WriteString("select obj_id, obj_type, uid, ctime from like where author=? and obj_type=? and state=1 and id < (select id from like where (obj_id=? and obj_type=? and uid=? limit 1)) order by id desc limit ? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(select obj_id, obj_type, author, ctime from @@table where uid=@uid and obj_type=@objType and state=1 and id < (select id from @@table where (obj_id=@objID and obj_type=@objType and uid=@author) limit 1) order by id desc limit @limit)
func (l likeDo) FindPubLikeRecord(objID int64, uid int64, author int64, objType int32, limit int8) (result []*model.Like, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	params = append(params, objType)
	params = append(params, objID)
	params = append(params, objType)
	params = append(params, author)
	params = append(params, limit)
	generateSQL.WriteString("select obj_id, obj_type, author, ctime from like where uid=? and obj_type=? and state=1 and id < (select id from like where (obj_id=? and obj_type=? and uid=?) limit 1) order by id desc limit ? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l likeDo) Debug() *likeDo {
	return l.withDO(l.DO.Debug())
}

func (l likeDo) WithContext(ctx context.Context) *likeDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l likeDo) ReadDB() *likeDo {
	return l.Clauses(dbresolver.Read)
}

func (l likeDo) WriteDB() *likeDo {
	return l.Clauses(dbresolver.Write)
}

func (l likeDo) Session(config *gorm.Session) *likeDo {
	return l.withDO(l.DO.Session(config))
}

func (l likeDo) Clauses(conds ...clause.Expression) *likeDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l likeDo) Returning(value interface{}, columns ...string) *likeDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l likeDo) Not(conds ...gen.Condition) *likeDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l likeDo) Or(conds ...gen.Condition) *likeDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l likeDo) Select(conds ...field.Expr) *likeDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l likeDo) Where(conds ...gen.Condition) *likeDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l likeDo) Order(conds ...field.Expr) *likeDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l likeDo) Distinct(cols ...field.Expr) *likeDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l likeDo) Omit(cols ...field.Expr) *likeDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l likeDo) Join(table schema.Tabler, on ...field.Expr) *likeDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l likeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *likeDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l likeDo) RightJoin(table schema.Tabler, on ...field.Expr) *likeDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l likeDo) Group(cols ...field.Expr) *likeDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l likeDo) Having(conds ...gen.Condition) *likeDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l likeDo) Limit(limit int) *likeDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l likeDo) Offset(offset int) *likeDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l likeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *likeDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l likeDo) Unscoped() *likeDo {
	return l.withDO(l.DO.Unscoped())
}

func (l likeDo) Create(values ...*model.Like) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l likeDo) CreateInBatches(values []*model.Like, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l likeDo) Save(values ...*model.Like) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l likeDo) First() (*model.Like, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Like), nil
	}
}

func (l likeDo) Take() (*model.Like, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Like), nil
	}
}

func (l likeDo) Last() (*model.Like, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Like), nil
	}
}

func (l likeDo) Find() ([]*model.Like, error) {
	result, err := l.DO.Find()
	return result.([]*model.Like), err
}

func (l likeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Like, err error) {
	buf := make([]*model.Like, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l likeDo) FindInBatches(result *[]*model.Like, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l likeDo) Attrs(attrs ...field.AssignExpr) *likeDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l likeDo) Assign(attrs ...field.AssignExpr) *likeDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l likeDo) Joins(fields ...field.RelationField) *likeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l likeDo) Preload(fields ...field.RelationField) *likeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l likeDo) FirstOrInit() (*model.Like, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Like), nil
	}
}

func (l likeDo) FirstOrCreate() (*model.Like, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Like), nil
	}
}

func (l likeDo) FindByPage(offset int, limit int) (result []*model.Like, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l likeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l likeDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l likeDo) Delete(models ...*model.Like) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *likeDo) withDO(do gen.Dao) *likeDo {
	l.DO = *do.(*gen.DO)
	return l
}
