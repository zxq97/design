// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zxq97/design/fuxi/pkg/model"
)

func newURLMap(db *gorm.DB, opts ...gen.DOOption) uRLMap {
	_uRLMap := uRLMap{}

	_uRLMap.uRLMapDo.UseDB(db, opts...)
	_uRLMap.uRLMapDo.UseModel(&model.URLMap{})

	tableName := _uRLMap.uRLMapDo.TableName()
	_uRLMap.ALL = field.NewAsterisk(tableName)
	_uRLMap.ID = field.NewInt64(tableName, "id")
	_uRLMap.ShortURL = field.NewString(tableName, "short_url")
	_uRLMap.RealURL = field.NewString(tableName, "real_url")
	_uRLMap.Status = field.NewInt32(tableName, "status")
	_uRLMap.Ctime = field.NewTime(tableName, "ctime")
	_uRLMap.Mtime = field.NewTime(tableName, "mtime")

	_uRLMap.fillFieldMap()

	return _uRLMap
}

type uRLMap struct {
	uRLMapDo uRLMapDo

	ALL      field.Asterisk
	ID       field.Int64 // gen id
	ShortURL field.String
	RealURL  field.String
	Status   field.Int32 // 0:未分配 1:已分配
	Ctime    field.Time  // 创建时间
	Mtime    field.Time  // 最近修改时间

	fieldMap map[string]field.Expr
}

func (u uRLMap) Table(newTableName string) *uRLMap {
	u.uRLMapDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uRLMap) As(alias string) *uRLMap {
	u.uRLMapDo.DO = *(u.uRLMapDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uRLMap) updateTableName(table string) *uRLMap {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.ShortURL = field.NewString(table, "short_url")
	u.RealURL = field.NewString(table, "real_url")
	u.Status = field.NewInt32(table, "status")
	u.Ctime = field.NewTime(table, "ctime")
	u.Mtime = field.NewTime(table, "mtime")

	u.fillFieldMap()

	return u
}

func (u *uRLMap) WithContext(ctx context.Context) *uRLMapDo { return u.uRLMapDo.WithContext(ctx) }

func (u uRLMap) TableName() string { return u.uRLMapDo.TableName() }

func (u uRLMap) Alias() string { return u.uRLMapDo.Alias() }

func (u uRLMap) Columns(cols ...field.Expr) gen.Columns { return u.uRLMapDo.Columns(cols...) }

func (u *uRLMap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uRLMap) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["short_url"] = u.ShortURL
	u.fieldMap["real_url"] = u.RealURL
	u.fieldMap["status"] = u.Status
	u.fieldMap["ctime"] = u.Ctime
	u.fieldMap["mtime"] = u.Mtime
}

func (u uRLMap) clone(db *gorm.DB) uRLMap {
	u.uRLMapDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uRLMap) replaceDB(db *gorm.DB) uRLMap {
	u.uRLMapDo.ReplaceDB(db)
	return u
}

type uRLMapDo struct{ gen.DO }

func (u uRLMapDo) Debug() *uRLMapDo {
	return u.withDO(u.DO.Debug())
}

func (u uRLMapDo) WithContext(ctx context.Context) *uRLMapDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uRLMapDo) ReadDB() *uRLMapDo {
	return u.Clauses(dbresolver.Read)
}

func (u uRLMapDo) WriteDB() *uRLMapDo {
	return u.Clauses(dbresolver.Write)
}

func (u uRLMapDo) Session(config *gorm.Session) *uRLMapDo {
	return u.withDO(u.DO.Session(config))
}

func (u uRLMapDo) Clauses(conds ...clause.Expression) *uRLMapDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uRLMapDo) Returning(value interface{}, columns ...string) *uRLMapDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uRLMapDo) Not(conds ...gen.Condition) *uRLMapDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uRLMapDo) Or(conds ...gen.Condition) *uRLMapDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uRLMapDo) Select(conds ...field.Expr) *uRLMapDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uRLMapDo) Where(conds ...gen.Condition) *uRLMapDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uRLMapDo) Order(conds ...field.Expr) *uRLMapDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uRLMapDo) Distinct(cols ...field.Expr) *uRLMapDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uRLMapDo) Omit(cols ...field.Expr) *uRLMapDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uRLMapDo) Join(table schema.Tabler, on ...field.Expr) *uRLMapDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uRLMapDo) LeftJoin(table schema.Tabler, on ...field.Expr) *uRLMapDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uRLMapDo) RightJoin(table schema.Tabler, on ...field.Expr) *uRLMapDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uRLMapDo) Group(cols ...field.Expr) *uRLMapDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uRLMapDo) Having(conds ...gen.Condition) *uRLMapDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uRLMapDo) Limit(limit int) *uRLMapDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uRLMapDo) Offset(offset int) *uRLMapDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uRLMapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *uRLMapDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uRLMapDo) Unscoped() *uRLMapDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uRLMapDo) Create(values ...*model.URLMap) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uRLMapDo) CreateInBatches(values []*model.URLMap, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uRLMapDo) Save(values ...*model.URLMap) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uRLMapDo) First() (*model.URLMap, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.URLMap), nil
	}
}

func (u uRLMapDo) Take() (*model.URLMap, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.URLMap), nil
	}
}

func (u uRLMapDo) Last() (*model.URLMap, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.URLMap), nil
	}
}

func (u uRLMapDo) Find() ([]*model.URLMap, error) {
	result, err := u.DO.Find()
	return result.([]*model.URLMap), err
}

func (u uRLMapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.URLMap, err error) {
	buf := make([]*model.URLMap, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uRLMapDo) FindInBatches(result *[]*model.URLMap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uRLMapDo) Attrs(attrs ...field.AssignExpr) *uRLMapDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uRLMapDo) Assign(attrs ...field.AssignExpr) *uRLMapDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uRLMapDo) Joins(fields ...field.RelationField) *uRLMapDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uRLMapDo) Preload(fields ...field.RelationField) *uRLMapDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uRLMapDo) FirstOrInit() (*model.URLMap, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.URLMap), nil
	}
}

func (u uRLMapDo) FirstOrCreate() (*model.URLMap, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.URLMap), nil
	}
}

func (u uRLMapDo) FindByPage(offset int, limit int) (result []*model.URLMap, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uRLMapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uRLMapDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uRLMapDo) Delete(models ...*model.URLMap) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uRLMapDo) withDO(do gen.Dao) *uRLMapDo {
	u.DO = *do.(*gen.DO)
	return u
}
