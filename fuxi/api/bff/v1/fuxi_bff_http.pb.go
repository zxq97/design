// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.18.0
// source: fuxi_bff.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFuxiBFFGetUrl = "/v1.FuxiBFF/GetUrl"
const OperationFuxiBFFSetUrl = "/v1.FuxiBFF/SetUrl"

type FuxiBFFHTTPServer interface {
	GetUrl(context.Context, *GetUrlRequest) (*GetUrlResponse, error)
	SetUrl(context.Context, *SetUrlRequest) (*emptypb.Empty, error)
}

func RegisterFuxiBFFHTTPServer(s *http.Server, srv FuxiBFFHTTPServer) {
	r := s.Route("/")
	r.GET("/fuxi/set_url", _FuxiBFF_SetUrl0_HTTP_Handler(srv))
	r.GET("/fuxi/real_url", _FuxiBFF_GetUrl0_HTTP_Handler(srv))
}

func _FuxiBFF_SetUrl0_HTTP_Handler(srv FuxiBFFHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUrlRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFuxiBFFSetUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUrl(ctx, req.(*SetUrlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _FuxiBFF_GetUrl0_HTTP_Handler(srv FuxiBFFHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUrlRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFuxiBFFGetUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUrl(ctx, req.(*GetUrlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUrlResponse)
		return ctx.Result(200, reply)
	}
}

type FuxiBFFHTTPClient interface {
	GetUrl(ctx context.Context, req *GetUrlRequest, opts ...http.CallOption) (rsp *GetUrlResponse, err error)
	SetUrl(ctx context.Context, req *SetUrlRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type FuxiBFFHTTPClientImpl struct {
	cc *http.Client
}

func NewFuxiBFFHTTPClient(client *http.Client) FuxiBFFHTTPClient {
	return &FuxiBFFHTTPClientImpl{client}
}

func (c *FuxiBFFHTTPClientImpl) GetUrl(ctx context.Context, in *GetUrlRequest, opts ...http.CallOption) (*GetUrlResponse, error) {
	var out GetUrlResponse
	pattern := "/fuxi/real_url"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFuxiBFFGetUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FuxiBFFHTTPClientImpl) SetUrl(ctx context.Context, in *SetUrlRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/fuxi/set_url"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFuxiBFFSetUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
